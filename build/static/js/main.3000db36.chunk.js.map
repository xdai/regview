{"version":3,"sources":["serviceWorker.js","components/BitGrid.js","RegDb.js","components/GroupSelect.js","components/Utils.js","components/RegEditor.js","components/RegisterViewer.js","components/GroupEditor.js","components/Converter.js","components/Exporter.js","components/RegList.js","components/DataPicker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","idleFieldCtrl","mode","activeKey","NaN","selectedBits","BitViewer","props","cellWidth","bitsPerRow","byteCount","geometry","Math","min","react_default","a","createElement","BitGridContainer","Viewer","Object","assign","fields","BitEditor","form","value","onChange","roundedUpBytes","v","isNaN","i","_roundUpToPow2","getFieldValue","triggerChange","changedValue","objectSpread","startEditingField","field","indexOf","bits","stopEditingField","_ref","asyncToGenerator","regenerator_default","mark","_callee","key","wrap","_context","prev","next","commitField","stop","_x","apply","this","arguments","stopAddingField","_ref2","_callee2","_context2","changeFieldRange","pos","isNewField","length","concat","toConsumableArray","sort","b","setFieldsValue","newField","array","idx","data","_patchArray","onInteraction","_ref3","_callee3","target","arg","_context3","t0","abrupt","_x2","_x3","Editor","onClick","containerStyle","gridTemplateColumns","borderWidth","lineHeight","gridStyle","gridAutoRows","className","style","BitPosMarker","ByteOffset","children","marker","push","offsets","bytesPerRow","labelLow","toString","substr","toUpperCase","labelHigh","segmentFields","map","seg","Fragment","low","high","fieldIdx","tooltip","placement","title","meaning","name","_useState","useState","_useState2","slicedToArray","hoverBit","setHoverBit","segments","interactiveBitRange","findIndex","_segments$idx","getMaxRange","shouldHighlight","range","FieldFragment","onHover","breakToBits","_getCoordinate","offset","width","floor","_getCoordinate2","_getCoordinate3","rowLow","colLow","_getCoordinate4","_getCoordinate5","rowHigh","colHigh","gridArea","isInteractive","Array","keys","x","Bit","highlight","height","onMouseOver","segmentField","boundary","forEach","filter","KeyExistError","_Error","message","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inherits","wrapNativeSuper","Error","regDb","RegDb","_this","subscribe","f","type","observers","unsubscribe","_unsubscribe","_f","_t","subscriber","notify","import","str","db","tx","allKeys","dbPromise","sent","transaction","storeName","store","getAllKeys","JSON","parse","entry","parent","includes","add","done","export","topKey","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","startsWith","undefined","Symbol","iterator","t1","get","t2","t3","return","finish","count","n","_callee4","_context4","getChildren","_ref5","_callee5","index","val","_context5","getAll","parseInt","getHierarchy","_callee7","_getHierarchy","hierarchy","_context7","_ref7","_callee6","nodes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","node","childKey","subTree","_context6","_x4","_x5","_ref8","_callee8","_context8","_x6","_ref9","_callee9","_context9","getKey","_x7","set","_ref10","_callee10","newValue","newKey","cursor","_context10","put","delete","endsWith","openCursor","replace","continue","oldData","newData","_x8","_x9","_ref11","_callee11","deletedKeys","_context11","_x10","rawData","reduce","curr","parseAddress","root","base","indexedDB","update","dbName","openDB","upgrade","objectStoreNames","contains","createObjectStore","createIndex","unique","alert","GroupSelect","except","path","options","setOptions","fetchData","hierarchyToOptions","label","slice","useEffect","cascader","allowClear","changeOnSelect","displayRender","selectedOptions","join","split","pathToValue","parseNumberString","s","_s","trim","acc","cur","splitKey","MaxRegSize","EmptyNewField","RegEditor","activePath","reg","onFinish","initialValues","size","fieldCtrl","then","console","log","_commitField","fieldPath","validateFields","_commitForm","values","rest","maxBit","objectWithoutProperties","es_form","colon","layout","es_row","gutter","col","span","Item","validateFirst","rules","required","whitespace","pattern","input","addonBefore","validator","rule","Promise","reject","resolve","TextArea","rows","FieldCtrl","FieldList","noStyle","shouldUpdate","current","localeCompare","justify","marginBottom","paddingBottom","_ref4","editors","_","FieldEditor","isActive","fieldNameRule","handleConfirm","handleDelete","card","display","extra","es_button","icon","CheckOutlined","disabled","CloseOutlined","popconfirm","okText","cancelText","onConfirm","DeleteOutlined","divider","orientation","ConstantList","List","entries","remove","constants","ConstantInput","ToggleTag","closable","onClose","marginTop","_ref6","setName","_useState3","_useState4","setValue","_useState5","_useState6","error","setError","schema","some","constant","isNumberString","Group","compact","placeholder","id","onInput","e","validate","first","firstFields","catch","errors","typography","Text","RegEditorModal","hide","_Form$useForm","Form","useForm","modalProps","visible","maskClosable","onOk","submit","onCancel","es_modal","RegEditor_RegEditor","Title","Typography","Paragraph","RegView","setData","handleUpdate","RegisterViewer_Viewer","skeleton","active","paragraph","showRegModel","setShowRegModel","reverse","Path","segs","breadcrumb","level","desc_short","EditOutlined","desc_long","AdaptiveBitViewer","tabs","defaultActiveKey","TabPane","tab","FieldTable","EncoderTable","DecoderTable","mql16","matchMedia","mql32","matches","can16","setCan16","_useState7","_useState8","can32","setCan32","handleSizeChange16","handleSizeChange32","addListener","removeListener","columns","dataIndex","render","text","record","table","rowKey","dataSource","pagination","ConstantTag","hex","tag","color","_useState9","_useState10","isHex","setIsHex","tagProps","DotTag","dot","badge","DotValue","marginRight","Code","code","_useState11","_useState12","source","setSource","_useState13","_useState14","sequence","setSequence","DeleteBtn","_form$getFieldsValue","getFieldsValue","_toPropertyKey","handleRemove","NumberOutlined","onCell","MenuOutlined","align","components","body","cell","EncoderCell","collapse","bordered","Panel","header","updateRow","row","defineProperty","content","margin","auto_complete","find","justifyContent","getOptions","shift","mask","k","_Form$useForm3","_useState15","_useState16","_useState17","_useState18","pin","setPin","_useState19","_useState20","otherIdx","setOtherIdx","_useState21","_useState22","showHex","setShowHex","decodeValue","handleAddValue","resetFields","PushPin","PushpinTwoTone","twoToneColor","_ref12","stopPropagation","max","handleRemoveValue","Field","_ref13","showBadge","autoFocus","htmlType","summary","colSpan","padding","es_checkbox","checked","onRow","rowIndex","onMouseEnter","onMouseLeave","GroupEditor","grp","formProps","labelCol","wrapperCol","GroupEditorModal","GroupEditor_GroupEditor","siglofyName","charAt","toLowerCase","classifyName","forEachNode","rootKey","func","address","forEachGroup","forEachRegister","Converter","handle","stringify","description","extension","result","getFactoryName","getClasslName","getClasslNameLong","hasSymbolicValue","enclosingName","symbolic","fieldName","valueType","runtimeAddress","constNess","classNameLong","factoryName","methodName","nodeName","getLevel","parentName","err","getEnclosingName","child","baseClassName","passThis","Exporter","saveAs","filename","dataStr","encodeURIComponent","downloadAnchorNode","document","setAttribute","appendChild","click","format","es_select","Option","ExporterModal","RegList","treeData","setTreeData","savedKeys","setSavedKeys","filteredData","setFilteredData","expandedKeys","setExpandedKeys","selectedKeys","setSelectedKeys","searchValue","setSearchValue","show","modalCtrl","setModalCtrl","handleClick","lst","onSelect","hierarchyToTreeData","onEdit","TreeTitle","isLeaf","oldKey","re","RegExp","filterTreeData","test","Search","tree","blockNode","switcherIcon","DownOutlined","onExpand","editBtn","deleteBtn","modalContent","modal","Modal","confirm","ExclamationCircleOutlined","_onOk","okButtonProps","loading","success","flex","Step","Steps","SourceSelect","radioStyle","href","rel","es_radio","paddingLeft","JsonReader","isLoading","setLoading","setFilename","dragCounter","setDragCounter","readData","file","reader","FileReader","onload","setJson","readAsText","fileList","es_alert","dragOverStyle","border","onDrop","preventDefault","dataTransfer","files","onDragOver","onDragEnter","onDragLeave","accept","spin","spinning","InboxOutlined","GroupAdder","DataPicker","setCurrent","json","isCommiting","setCommiting","handleImport","handleFresh","reset","steps","es_steps","el","textAlign","getContent","getNextBtn","Header","Layout","Sider","Content","Main","setActivePath","showGrpModel","setShowGrpModel","showExpModel","setShowExpModel","setContent","empty","es_layout","position","zIndex","fontSize","ghost","FolderAddOutlined","FileAddOutlined","ExportOutlined","ImportOutlined","marginLeft","theme","overflow","left","RegList_RegList","background","ReactDOM","stage","setStage","components_DataPicker","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3000db36.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from 'react';\n\n// antd\nimport { Tooltip } from 'antd';\n\nimport './BitGrid.css';\n\nexport const idleFieldCtrl = {\n\tmode: \"idle\",\n\tactiveKey: NaN,\n\tselectedBits: [],\n};\n\nexport function BitViewer(props) {\n    const {cellWidth, bitsPerRow, byteCount} = props;\n    const geometry = {\n        cellWidth: cellWidth,\n        bitsPerRow: Math.min(bitsPerRow, 8 * byteCount),\n        byteCount: byteCount,\n    };\n\n    return (\n        <BitGridContainer {...geometry}>\n            <Viewer\n                {...geometry}\n                fields={props.fields}\n            />\n        </BitGridContainer>\n    );\n}\n\nexport function BitEditor(props) {\n    const {\n        cellWidth, bitsPerRow, byteCount, // geometry\n        form, // form instance it belongs to\n        value, onChange // customized form control \n\t} = props;\n\n\tconst _roundUpToPow2 = (v) => {\n        if (isNaN(v)) return 1;\n        for (let i = 0; ; i++) {\n            if (v <= (1 << i)) {\n                return 1 << i;\n            }\n        }\n\t};\n\t\n\tconst roundedUpBytes = _roundUpToPow2(byteCount);\n\n    const geometry = {\n        cellWidth: cellWidth,\n        bitsPerRow: Math.min(bitsPerRow, 8 * roundedUpBytes),\n        byteCount: roundedUpBytes,\n\t};\n\t\n\tconst fields = form.getFieldValue(\"fields\");\n\n    const triggerChange = changedValue => {\n        onChange && onChange({\n            ...value,\n            ...changedValue,\n        });\n    }\n\n\tconst startEditingField = (field) => {\n        triggerChange({\n            mode: \"editing\",\n            activeKey: fields.indexOf(field),\n            selectedBits: field.bits,\n        })\n    }\n\n\tconst stopEditingField = async (key) => {\n        await props.commitField(key);\n\t}\n    \n    const startAddingField = (pos) => {\n        triggerChange({\n            mode: \"adding\",\n            activeKey: NaN,\n            selectedBits: [pos],\n        })\n    }\n\t\n\tconst stopAddingField = async () => {\n        await props.commitField(NaN)\n\t};\n\n    const changeFieldRange = (key, pos) => {\n\t\tconst isNewField = isNaN(key);\n\n\t\t// merge `value` into `array[idx]`, return new array\n\t\tconst _patchArray = (array, idx, value) => {\n\t\t\tconst data = [...array];\n\t\t\tdata[idx] = {\n\t\t\t\t...data[idx],\n\t\t\t\t...value,\n\t\t\t};\n\t\t\treturn data;\n\t\t}\n\t\t\n\t\t// don't update the range if it's not closed\n\t\tif (value.selectedBits.length === 0 || value.selectedBits.length === 2) {\n\t\t\ttriggerChange({selectedBits: [pos]});\n\t\t}\n\n\t\t// now we got a closed range, do the acture update\n\t\tif (value.selectedBits.length === 1) {\n\t\t\tconst selectedBits = [...value.selectedBits, pos].sort((a, b) => a - b);\n\t\t\t\n\t\t\ttriggerChange({\tselectedBits: selectedBits});\n\t\t\t\n\t\t\tif (isNewField) {\n\t\t\t\tform.setFieldsValue({\n\t\t\t\t\tnewField: {\n\t\t\t\t\t\tbits: selectedBits,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst fields = form.getFieldValue(\"fields\");\n\t\t\t\tform.setFieldsValue({\n\t\t\t\t\tfields: _patchArray(fields, key, {bits: selectedBits})\n                });\n\t\t\t}\n\t\t}\n\t}\n\n\tconst onInteraction = async (target, arg) => {\n\t\tswitch (value.mode) {\n\t\tcase \"idle\":\n\t\t\tif (target === \"field\") {\n\t\t\t\tstartEditingField(arg);\n\t\t\t} else if (target === \"bit\") {\n\t\t\t\tstartAddingField(arg);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"editing\":\n\t\t\tif (target === \"field\" && value.selectedBits.length === 2) {\n                await stopEditingField(value.activeKey);\n                startEditingField(arg);\n\t\t\t} else if (target === \"bit\") {\n\t\t\t\tchangeFieldRange(value.activeKey, arg);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"adding\":\n\t\t\tif (target === \"field\" && value.selectedBits.length === 2) {\n                await stopAddingField();\n                startEditingField(arg);\n\t\t\t} else if (target === \"bit\") {\n\t\t\t\tchangeFieldRange(NaN, arg);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n    return (\n        <BitGridContainer {...geometry}>\n            <Editor\n                {...geometry}\n                {...value}\n                fields={fields}\n                onClick={onInteraction}\n            />\n        </BitGridContainer>\n    );\n}\n\nfunction BitGridContainer(props) {\n    const {cellWidth, bitsPerRow, byteCount} = props;\n    const borderWidth = 2;\n    const gapWidth = 1;\n    const bitGridWidth = borderWidth * 2 + cellWidth * bitsPerRow + gapWidth * (bitsPerRow - 1);\n    const containerStyle = {\n        gridTemplateColumns: `${bitGridWidth}px 80px`,\n        lineHeight: `${cellWidth}px`\n    };\n    const gridStyle = {\n        gridTemplateColumns: `repeat(${props.bitsPerRow}, ${props.cellWidth}px)`,\n        gridAutoRows: `${props.cellWidth}px`,\n    };\n\n    return (\n        <div className=\"bit-grid\" style={containerStyle}>\n            <BitPosMarker cellWidth={cellWidth} bitsPerRow={bitsPerRow} />\n            <ByteOffset   cellWidth={cellWidth} bitsPerRow={bitsPerRow} byteCount={byteCount} />\n            <div className=\"grid\" style={gridStyle}>\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nfunction BitPosMarker(props) {\n    let marker = [];\n    const style = {\n        gridTemplateColumns: `repeat(${props.bitsPerRow}, ${props.cellWidth}px)`,\n\t    gridAutoRows: `${props.cellWidth}px`\n    };\n\n    for (let i=props.bitsPerRow-1; i>=0; i--) {\n        marker.push(\n            <div key={i} className=\"bit-pos-indicator\">{i}</div>\n        );\n    }\n\n    return (\n        <div className=\"bit-pos-marker\" style={style}> \n            {marker} \n        </div>\n    ); \n}\n\nfunction ByteOffset(props) {\n    let offsets = [];\n    const bytesPerRow = props.bitsPerRow / 8;\n    const style = {\n        gridAutoRows: `${props.cellWidth}px`,\n    };\n\n    for (let i = 0; i < props.byteCount; i += bytesPerRow) {\n        const labelLow  = (\"00\" + (i).toString(16)).substr(-2).toUpperCase();\n        const labelHigh = (\"00\" + (i + bytesPerRow - 1).toString(16)).substr(-2).toUpperCase();\n        offsets.push(<div key={i}>{labelHigh}-{labelLow}H</div>);\n    }\n\n    return (\n        <div className=\"byte-offset\" style={style}> \n            {offsets} \n        </div>\n    );\n}\n\nfunction Viewer(props) {\n\tconst {fields, bitsPerRow, byteCount} = props;\n    const segments = segmentFields(fields, bitsPerRow, byteCount);\n\n    const children = segments.map(seg => (\n        <Fragment\n            key={seg.low}\n            low={seg.low}\n            high={seg.high}\n            bitsPerRow={bitsPerRow}\n        >{\n            isNaN(seg.fieldIdx) ? (\n                <div className=\"field-fragment-rsvd\">\n                    Rsvd\n                </div>\n            ) : (\n                <div className=\"field-fragment\">\n                    <Tooltip \n                        placement=\"top\" \n                        title={`[${fields[seg.fieldIdx].bits[1]}:${fields[seg.fieldIdx].bits[0]}] ${fields[seg.fieldIdx].meaning}`}\n                    >\n                        {fields[seg.fieldIdx].name}\n                    </Tooltip>\n                </div>\n             )\n        }</Fragment>\n    ));\n\n    return children;\n}\n\nfunction Editor(props) {\n    const [hoverBit, setHoverBit] = useState(NaN);\n    const {fields, activeKey, selectedBits} = props;\n\tconst segments = segmentFields(fields, props.bitsPerRow, props.byteCount);\n\t\n    const getMaxRange = (pos) => {\n        const idx = segments.findIndex(seg => seg.low <= pos && pos <= seg.high);\n        let {low, high} = segments[idx];\n\n        for (let i = idx - 1; i >= 0; i--) {\n            if (isNaN(segments[i].fieldIdx) || segments[i].fieldIdx === activeKey) {\n\t\t\t\tlow = segments[i].low;\n            } else {\n\t\t\t\tbreak;\n            }\n        }\n\n        for (let i = idx + 1; i < segments.length; i++) {\n            if (isNaN(segments[i].fieldIdx) || segments[i].fieldIdx === activeKey) {\n\t\t\t\thigh = segments[i].high;\n\t\t\t} else {\n                break;\n            }\n        }\n        \n        return [low, high];\n    }\n\n\tconst interactiveBitRange = selectedBits.length === 1 ? getMaxRange(selectedBits[0]) : null;\n\t\n    const shouldHighlight = (pos) => {\n        let range = [...selectedBits];\n        if (range.length === 1) {\n            range.push(isNaN(hoverBit) ? range[0] : hoverBit);\n            range.sort((a, b) => a - b);\n        }\n        return (pos >= range[0] && pos <= range[1]);\n\t};\n    \n    const children = segments.map(seg => (\n        <FieldFragment\n            key={seg.low}\n            low={seg.low}\n            high={seg.high}\n            cellWidth={props.cellWidth}\n            bitsPerRow={props.bitsPerRow}\n            byteCount={props.byteCount}\n            field={fields[seg.fieldIdx]} \n            onClick={props.onClick}\n            onHover={setHoverBit}\n            shouldHighlight={shouldHighlight}\n            interactiveBitRange={interactiveBitRange}\n            breakToBits={\n\t\t\t\t// rsvd field\n\t\t\t\tisNaN(seg.fieldIdx) ||\n\t\t\t\t// active field \n\t\t\t\tactiveKey === seg.fieldIdx\n\t\t\t}\n        />\n    ));\n\n    return children;\n}\n\nfunction Fragment(props) {\n\tconst _getCoordinate = (offset, width) => {\n\t\tconst row = Math.floor(offset / width) + 1;\n\t\tconst col = width - offset % width;\n\t\treturn [row, col];\n\t}\n\t\n\tconst [rowLow,  colLow] =  _getCoordinate(props.low,  props.bitsPerRow);\n    const [rowHigh, colHigh] = _getCoordinate(props.high, props.bitsPerRow);\n    const style = {\n        gridArea: `${rowLow} / ${colHigh} / ${rowHigh + 1} / ${colLow + 1}`\n    };\n\n    return <div style={style}> {props.children} </div>;\n}\n\nfunction FieldFragment(props) {\n    const geometry = {\n        low: props.low,\n        high: props.high,\n        bitsPerRow: props.bitsPerRow\n    };\n\n    const isInteractive = (pos) => {\n        if (!props.interactiveBitRange) return true;\n        return props.interactiveBitRange[0] <= pos && pos <= props.interactiveBitRange[1];\n    }\n\n    return props.breakToBits ? (\n        [...Array(props.high - props.low + 1).keys()].map(x => (\n            <Bit\n                key={x}\n                pos={x + props.low}\n                bitsPerRow={props.bitsPerRow}\n                highlight={props.shouldHighlight(x + props.low)}\n                onClick={\n                    isInteractive(x + props.low) ? ()=>props.onClick(\"bit\", x + props.low) : ()=>{}\n                }\n                onHover={\n                    isInteractive(x + props.low) ? props.onHover : ()=>{}\n                }\n            />\n        ))\n    ) : (\n        <Fragment {...geometry}>\n            <Tooltip \n                placement=\"top\" \n                title={`[${Math.min(8*props.byteCount-1, props.field.bits[1])}:${props.field.bits[0]}] ${props.field.meaning}`}\n            >\n                <div \n                    className=\"field-fragment\"\n                    style={{height: props.cellWidth}}\n                    onClick={()=>props.onClick(\"field\", props.field)}\n                >\n                    {props.field.name}\n                </div>\n            </Tooltip>\n        </Fragment>\n    )\n}\n\n/*\n * props:\n *  - pos: number\n *  - bitsPerRow: number\n *  - onClick: (string, number) => { }\n *  - onHover: (number) => { }\n */\nfunction Bit(props) {\n    const geometry = {\n        low: props.pos,\n        high: props.pos,\n        bitsPerRow: props.bitsPerRow\n    };\n\n    return (\n        <Fragment {...geometry}>\n            <div \n                className={`bit${props.highlight ? \" highlight\" : \"\"}`}\n                onClick={()=>props.onClick(\"bit\", props.pos)}\n                onMouseOver={()=>props.onHover(props.pos)}\n            >\n                {props.pos}\n            </div>\n        </Fragment>\n    );\n}\n\n// break `field` to `segments` on `boundary`\nfunction segmentField(boundary, low, high, fieldIdx) {\n    const segments = [];\n\n    while (low <= high) {\n        const pos = Math.min(low | (boundary - 1), high);\n        segments.push({\n            low: low,\n            high: pos,\n            fieldIdx: fieldIdx, // of which this segment belongs to\n        });\n        low = pos + 1;\n    }\n\n    return segments;\n}\n\nfunction segmentFields(fields, bitsPerRow, byteCount) {\n    let segments = [];\n    let pos = 0;\n    \n    [...fields].sort(\n        (a, b) => a.bits[0] - b.bits[0]\n    ).forEach(field => {\n        // rsvd field\n        if (pos < field.bits[0]) {\n            segments = [\n                ...segments, \n                ...segmentField(bitsPerRow, pos, field.bits[0] - 1, NaN)\n            ];\n        }\n        // real field\n        segments = [\n            ...segments, \n            ...segmentField(bitsPerRow, ...field.bits, fields.indexOf(field))\n        ];\n        pos = field.bits[1] + 1;\n    });\n\n    // rsvd field\n    if (pos < 8 * byteCount) {\n        segments = [\n            ...segments, \n            ...segmentField(bitsPerRow, pos, 8 * byteCount - 1, NaN)\n        ];\n    }\n\n    return segments.filter(seg => seg.high < 8 * byteCount);\n}","import { openDB } from 'idb';\r\n\r\nclass RegDb {\r\n\tconstructor() {\r\n\t\tif (!window.indexedDB) {\r\n    \t\twindow.alert(\"Your browser doesn't support a stable version of IndexedDB.\");\r\n    \t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.observers = {\r\n\t\t\tadd: [],\r\n\t\t\tupdate: [],\r\n\t\t\tdelete: [],\r\n\t\t};\r\n\r\n\t\tthis.dbName    = \"NnRegView\";\r\n\t\tthis.storeName = \"store\";\r\n\r\n\t\tthis.dbPromise = openDB(\r\n\t\t\tthis.dbName, \r\n\t\t\t1, \r\n\t\t\t{\r\n\t\t\t\tupgrade(db) {\r\n\t\t\t\t\tif (!db.objectStoreNames.contains(\"store\")) {\r\n\t\t\t\t\t\tconst store = db.createObjectStore(\"store\");\r\n\t\t\t\t\t\tstore.createIndex(\"parent\", \"parent\", {unique: false});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tsubscribe = (f, type) => {\r\n\t\tif (type && this.observers[type]) {\r\n\t\t\tthis.observers[type].push(f);\r\n\t\t} else {\r\n\t\t\tObject.keys(this.observers).forEach(key => this.observers[key].push(f));\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tunsubscribe = (f, type) => {\r\n\t\tconst _unsubscribe = (_f, _t) => {\r\n\t\t\tthis.observers[_t] = this.observers[_t].filter(subscriber => subscriber !== _f);\r\n\t\t}\r\n\t\tif (type && this.observers[type]) {\r\n\t\t\t_unsubscribe(f, type);\r\n\t\t} else {\r\n\t\t\tObject.keys(this.observers).forEach(key => _unsubscribe(f, key));\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tnotify = (data) => {\r\n\t\tthis.observers[data.type].forEach(f => f(data));\r\n\t}\r\n\r\n\timport = async (str) => {\r\n\t\tconst db = await this.dbPromise;\r\n\t\tconst tx = db.transaction(this.storeName, 'readwrite');\r\n\t\tconst allKeys = await tx.store.getAllKeys();\r\n\t\tconst data = JSON.parse(str);\r\n\r\n\t\t// error if the entry is exist\r\n\t\tdata.forEach(entry => {\r\n\t\t\tconst key = (entry.parent || '') + entry.name;\r\n\t\t\tif (allKeys.includes(key)) {\r\n\t\t\t\tthrow new KeyExistError(key);\r\n\t\t\t}\r\n\t\t\ttx.store.add(entry, key);\r\n\t\t});\r\n\r\n\t\tawait tx.done;\r\n\t}\r\n\r\n\texport = async (topKey) => {\r\n\t\tconst db = await this.dbPromise;\r\n\t\tconst tx = db.transaction(this.storeName);\r\n\r\n\t\tconst allKeys = (await tx.store.getAllKeys()).filter(\r\n\t\t\tkey => key.startsWith(topKey) || topKey.startsWith(key)\r\n\t\t).sort();\r\n\r\n\t\tconst data = [];\r\n\t\tfor (const key of allKeys) {\r\n\t\t\tdata.push(await tx.store.get(key));\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\t// Count the number of entries in DB\r\n\tcount = async () => {\r\n\t\tconst db = await this.dbPromise;\r\n\t\tconst n = await db.count(this.storeName);\r\n\t\treturn n;\r\n\t}\r\n\r\n\tgetAllKeys = async () => {\r\n\t\tconst db = await this.dbPromise;\r\n\t\tconst keys = await db.getAllKeys(this.storeName);\r\n\t\treturn keys;\r\n\t}\r\n\r\n\tgetChildren = async (key) => {\r\n\t\tconst db = await this.dbPromise;\r\n\t\tconst tx = db.transaction(this.storeName, 'readonly');\r\n\t\tconst index = tx.store.index('parent');\r\n\t\tconst val = await index.getAll(key);\r\n\r\n\t\tval.sort((a, b) => {\r\n\t\t\treturn parseInt(a.offset, 16) - parseInt(b.offset, 16);\r\n\t\t});\r\n\t\treturn val;\r\n\t}\r\n\r\n\tgetHierarchy = async () => {\r\n\t\tconst db = await this.dbPromise;\r\n\t\tconst tx = db.transaction(this.storeName);\r\n\t\tconst idx = tx.store.index(\"parent\");\r\n\t\t\r\n\t\tconst _getHierarchy = async (key, name) => {\r\n\t\t\tconst nodes = await idx.getAll(key);\r\n\t\t\tnodes.sort((a, b) => {\r\n\t\t\t\treturn parseInt(a.offset, 16) - parseInt(b.offset, 16);\r\n\t\t\t});\r\n\r\n\t\t\tconst children = [];\r\n\r\n\t\t\tfor (const node of nodes) {\r\n\t\t\t\tconst childKey = node.parent + node.name;\r\n\t\t\t\tconst subTree = await _getHierarchy(childKey, node.name);\r\n\t\t\t\tchildren.push(subTree);\r\n\t\t\t}\r\n\r\n\t\t\treturn {name, children};\r\n\t\t}\r\n\r\n\t\tconst hierarchy = await _getHierarchy(\"/\");\r\n\t\treturn hierarchy.children;\r\n\t}\r\n\t\r\n\tget = async (key) => {\r\n\t\tconst db = await this.dbPromise;\r\n\t\tconst val = await db.get(this.storeName, key);\r\n\t\treturn val;\r\n\t}\r\n\t\r\n\t// Add new entry to DB\r\n\tadd = async (data) => {\r\n\t\tconst key = data.parent + data.name;\r\n\t\tconst db = await this.dbPromise;\r\n\t\t//await db.add(this.storeName, data, key);\r\n\t\tconst tx = db.transaction(this.storeName, 'readwrite');\r\n\t\tif(await tx.store.getKey(key)) {\r\n\t\t\tthrow new KeyExistError(key);\r\n\t\t}\r\n\t\ttx.store.add(data, key);\r\n\t\tawait tx.done;\r\n\r\n\t\tthis.notify({\r\n\t\t\ttype: \"add\",\r\n\t\t\tdata: data,\r\n\t\t});\r\n\t}\r\n\r\n\t// Updata (i.e. shallow merge) props of an entry\r\n\tset = async (key, props) => {\r\n\t\tif (key === '/') {\r\n\t\t\tthrow Error(`Root entry is readonly`);\r\n\t\t}\r\n\t\t\r\n\t\tconst db = await this.dbPromise;\r\n\t\tconst tx = db.transaction(this.storeName, 'readwrite');\r\n\t\t\r\n\t\tconst value = await tx.store.get(key);\r\n\t\tconst newValue = {...value, ...props};\r\n\t\tconst newKey = newValue.parent + newValue.name;\r\n\r\n\t\t\r\n\t\tif (key === newKey) { // no key change\r\n\t\t\ttx.store.put(newValue, key);\r\n\t\t} else { // needs to move all decendants\r\n\t\t\tif (newKey.startsWith(key)) {\r\n\t\t\t\tthrow Error(`You cannot rename ${key} to ${newKey}`);\r\n\t\t\t}\r\n\t\t\tif(await tx.store.getKey(newKey)) {\r\n\t\t\t\tthrow new KeyExistError(newKey);\r\n\t\t\t}\r\n\t\t\ttx.store.delete(key);\r\n\t\t\ttx.store.add(newValue, newKey);\r\n\r\n\t\t\t// Iterate the DB, update `key` and `parent` of all descendants.\r\n\t\t\t// FIXME: This might be expensive. Consider changing DB schema.\r\n\t\t\tif (newKey.endsWith(\"/\")) {\r\n\t\t\t\tlet cursor = await tx.store.openCursor();\r\n\t\t\t\twhile (cursor) {\r\n\t\t\t\t\tif (cursor.key.startsWith(key)) {\r\n\t\t\t\t\t\ttx.store.add({\r\n\t\t\t\t\t\t\t...cursor.value,\r\n\t\t\t\t\t\t\tparent: cursor.value.parent.replace(key, newKey)\r\n\t\t\t\t\t\t}, cursor.key.replace(key, newKey));\r\n\t\t\t\t\t\tcursor.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcursor = await cursor.continue();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\tawait tx.done;\r\n\r\n\t\tthis.notify({\r\n\t\t\ttype: \"update\",\r\n\t\t\toldData: value,\r\n\t\t\tnewData: newValue,\r\n\t\t});\r\n\t}\r\n\t\r\n\t// Delete all entries under `key` (inclusive)\r\n\tdelete = async (key) => {\r\n\t\tconst db = await this.dbPromise;\r\n\t\tconst tx = db.transaction(this.storeName, 'readwrite');\r\n\t\t\r\n\t\tconst deletedKeys = [];\r\n\t\tlet cursor = await tx.store.openCursor();\r\n\t\twhile (cursor) {\r\n\t\t\tif (cursor.key.startsWith(key)) {\r\n\t\t\t\tdeletedKeys.push(cursor.key);\r\n\t\t\t\tawait cursor.delete();\r\n\t\t\t}\r\n\t\t\tcursor = await cursor.continue();\r\n\t\t}\r\n\r\n\t\tawait tx.done;\r\n\r\n\t\tthis.notify({\r\n\t\t\ttype: \"delete\",\r\n\t\t\tdeletedKeys: deletedKeys,\r\n\t\t});\r\n\t}\r\n\r\n\t// Delete everything except the root (i.e. '/').\r\n\t// reset = async () => {\r\n\t// \tconst db = await this.dbPromise;\r\n\t// \tconst tx = db.transaction(this.storeName, 'readwrite');\r\n\t// \ttx.store.clear();\r\n\t// \ttx.store.add({name: '/', offset: '0'}, '/');\r\n\t// \tawait tx.done;\r\n\t// }\r\n\r\n\tparse = (rawData) => {\r\n\t\tconst data = rawData.reduce((prev, curr) => {\r\n\t\t\tconst key = (curr.parent || \"\") + curr.name;\r\n\t\t\tif (prev[key]) {\r\n\t\t\t\tprev[key].node = curr;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tprev[key] = {\r\n\t\t\t\t\tnode: curr,\r\n\t\t\t\t\tchildren: []\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif (curr.parent) {\r\n\t\t\t\tif (prev[curr.parent]) {\r\n\t\t\t\t\tprev[curr.parent].children.push(key);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tprev[curr.parent] = {\r\n\t\t\t\t\t\tchildren: [key]\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn prev;\r\n\t\t}, []);\r\n\r\n\t\tconst parseAddress = (root, base = 0) => {\r\n\t\t\troot['address'] = base + parseInt(root.node.offset, 16);\r\n\t\t\troot['children'].forEach(childKey => {\r\n\t\t\t\tparseAddress(data[childKey], root['address']);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tparseAddress(data['/']);\r\n\t\treturn data;\r\n\t}\r\n}\r\n\r\nexport class KeyExistError extends Error {\r\n\tconstructor(message) {\r\n\t  super(message);\r\n\t  this.name = 'KeyExist';\r\n\t}\r\n}\r\n\r\nexport class DbEmptyError extends Error {\r\n\tconstructor(message) {\r\n\t  super(message);\r\n\t  this.name = 'DbEmpty';\r\n\t}\r\n}\r\n\r\nconst regDb = new RegDb();\r\n\r\nexport default regDb;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { Cascader } from 'antd';\r\nimport regDb from '../RegDb';\r\n\r\nexport default function GroupSelect(props) {\r\n    const [path, onChange, except] = [props.value, props.onChange, props.except];\r\n    const [options, setOptions] = useState([]);\r\n\r\n    const fetchData = async () => {\r\n        const hierarchy = await regDb.getHierarchy();\r\n        const options = hierarchyToOptions(hierarchy, \"/\")\r\n        setOptions([{\r\n            value: \"/\",\r\n            label: \"/\",\r\n            ...(options.length && {\r\n                children: options\r\n            }),\r\n        }]);\r\n    }\r\n\r\n    // `options` props of `Cascader` doesn't like `children` to be empty array.\r\n    const hierarchyToOptions = (hierarchy, topKey) => {\r\n        const v = hierarchy.filter(\r\n            node => node.name.endsWith(\"/\") && (!except || topKey + node.name !== except)\r\n        ).map(\r\n            node => {\r\n                const options = hierarchyToOptions(node.children, topKey + node.name);\r\n                return {\r\n                    value: node.name,\r\n                    label: node.name.slice(0, -1),\r\n                    ...(options.length && {\r\n                        children: options\r\n                    })\r\n                }\r\n            }\r\n        );\r\n        return v;\r\n    }\r\n\r\n    const pathToValue = (path) => {\r\n        if (!path) return [];\r\n        if (path === \"/\") return [\"/\"];\r\n        return path.split(\"/\").slice(0, -1).map(x=>x+\"/\");\r\n    }\r\n\r\n    const valueToPath = (value) => {\r\n        return value.join(\"\");\r\n    }\r\n\r\n    const displayRender = (label, selectedOptions) => {\r\n        return label.length ? [\"\", ...label.slice(1), \"\"].join(\" / \") : \"\";\r\n    }\r\n\r\n    useEffect(() => {fetchData()}, []);\r\n\r\n    return (\r\n        <Cascader \r\n            allowClear={false}\r\n            changeOnSelect \r\n            displayRender={displayRender} \r\n            options={options} \r\n            value={pathToValue(path)}\r\n            onChange={v=>onChange(valueToPath(v))}\r\n        />\r\n    );\r\n}","export function str2hex(s) {\r\n\treturn parseInt(s, 16);\r\n}\r\n\r\nexport function num2hexstr(n) {\r\n\treturn \"0x\" + (\"00000000\" + n.toString(16)).toUpperCase().substr(-8);\r\n}\r\n\r\nexport function isNumberString(s) {\r\n\tconst _s = s.trim();\r\n\treturn !!(\r\n\t\t_s.match(/^[1-9]\\d*$/)     || // decimal, e.g. \"128\"\r\n\t\t_s.match(/^0[0-7]*$/)      || // octal, e.g. \"073\"\r\n\t\t_s.match(/^0x[0-9a-f]+$/i) || // hex, e.g. \"0x07\"\r\n\t\t_s.match(/^[0-9a-f]+h$/i)  || // hex, e.g. \"07h\"\r\n\t\t_s.match(/^0b[01]+$/i)        // binary, e.g. \"0b1011\"\r\n\t);\r\n}\r\n\r\nexport function parseNumberString(s) {\r\n\tconst _s = s.trim();\r\n\tif (_s.match(/^[1-9]\\d*$/)) {  // decimal\r\n\t\treturn parseInt(_s, 10);\r\n\t} else if (_s.match(/^0[0-7]*$/)) { // octal\r\n\t\treturn parseInt(_s, 8);\r\n\t} else if (_s.match(/^0x[0-9a-f]+$/i)) { // hex, e.g. \"0x07\"\r\n\t\treturn parseInt(_s, 16);\r\n\t} else if (_s.match(/^[0-9a-f]+h$/i)) { // hex, e.g. \"07h\"\r\n\t\treturn parseInt(_s.slice(0, -1), 16);\r\n\t} else if (_s.match(/^0b[01]+$/i)) { // binary, e.g. \"0b1011\"\r\n\t\treturn _s.slice(2).split(\"\").reduce((acc, cur) => (acc << 1) | cur, 0);\r\n\t} else {\r\n\t\treturn NaN;\r\n\t}\r\n}\r\n\r\nexport function isInRange(n, range) {\r\n\treturn (range[0] <= n && n <= range[1]) || (range[1] <= n && n <= range[0]);\r\n}\r\n\r\nexport function splitKey(key) {\r\n\tif (!key) {\r\n\t\treturn [undefined, undefined];\r\n\t}\r\n\t\r\n\tif (key === '/') {\r\n\t\treturn [undefined, '/'];\r\n\t}\r\n\r\n\treturn key.match(/^(.*\\/)(.+)$/).slice(1, 3);\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\n// antd\r\nimport { Row, Col, Modal, Form, Input, Button, Popconfirm, Card, Divider, Typography } from 'antd';\r\nimport { DeleteOutlined, CheckOutlined, CloseOutlined } from '@ant-design/icons';\r\n\r\nimport schema from 'async-validator';\r\n\r\nimport regDb from '../RegDb';\r\n\r\nimport { BitEditor, idleFieldCtrl } from './BitGrid';\r\nimport GroupSelect from './GroupSelect';\r\nimport { ToggleTag } from './RegisterViewer';\r\nimport { isNumberString, parseNumberString } from './Utils';\r\n\r\nimport './RegEditor.css';\r\n\r\nconst MaxRegSize = 64; // in bytes\r\n\r\nconst EmptyNewField = {\r\n\tbits: [],\r\n\tname: \"\",\r\n\tmeaning: \"\",\r\n\tvalue: [],\r\n};\r\n\r\n//------------------------------------------------------------\r\nexport default function RegEditor(props) {\r\n\tconst {form, parent, activePath, reg, onFinish} = props;\r\n\tconst initialValues = {\r\n\t\t...(reg || {\r\n\t\t\tparent: parent,\r\n\t\t\tsize: \"4\",\r\n\t\t\tfields: [],\r\n\t\t}),\r\n\t\tfieldCtrl: idleFieldCtrl,\r\n\t\tnewField: EmptyNewField,\r\n\t};\r\n\r\n\t// try to be smart: set `offset` and `size` based on current active register\r\n\tuseEffect(() => {\r\n\t\tif (activePath) {\r\n\t\t\tregDb.get(activePath).then(value => {\r\n\t\t\t\tconsole.log(value);\r\n\t\t\t\tform.setFieldsValue({\r\n\t\t\t\t\toffset: (parseInt(value.offset, 16) + parseInt(value.size, 10)).toString(16).toUpperCase(),\r\n\t\t\t\t\tsize: value.size,\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t}\r\n\t}, [])\r\n\r\n\tconst _commitField = async (idx) => {\r\n\t\tconst isNewField = isNaN(idx);\r\n\t\tconst fieldPath = isNewField ? [\"newField\"] : [\"fields\", idx];\r\n\t\tconst value = await form.validateFields([fieldPath]);\r\n\t\tform.setFieldsValue({\r\n\t\t\tfieldCtrl: idleFieldCtrl, \r\n\t\t\t...(isNewField && {\r\n\t\t\t\tfields: [...form.getFieldValue([\"fields\"]), value.newField].sort((a, b) => a.bits[0] - b.bits[0]),\r\n\t\t\t\tnewField: EmptyNewField\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\tconst _commitForm = async (values) => {\r\n\t\tconst {fieldCtrl, fields, newField, ...rest} = values;\r\n\t\tconst data = {\r\n\t\t\t...rest,\r\n\t\t\tfields: fields || [],\r\n\t\t}\r\n\t\t\r\n\t\tif (fieldCtrl.mode === \"adding\") {\r\n\t\t\tdata.fields.push(newField);\r\n\t\t}\r\n\r\n\t\tdata.fields.sort((a, b) => a.bits[0] - b.bits[0]);\r\n\r\n\t\t// trancate the fields exsiding `maxBit`\r\n\t\tconst maxBit = 8 * data.size - 1;\r\n\t\tdata.fields = data.fields.filter(\r\n\t\t\tfield => field.bits[0] <= maxBit\r\n\t\t).map(\r\n\t\t\tfield => ({\r\n\t\t\t\tbits: [field.bits[0], Math.min(maxBit, field.bits[1])],\r\n\t\t\t\tname: field.name,\r\n\t\t\t\tmeaning: field.meaning,\r\n\t\t\t\tvalue: field.value,\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif (reg) { // update\r\n\t\t\tawait regDb.set(reg.parent + reg.name, data);\r\n\t\t} else { // add new\r\n\t\t\tawait regDb.add(data);\r\n\t\t}\r\n\t\t\r\n\t\tonFinish();\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Form \r\n\t\t\tform={form} \r\n\t\t\tcolon={false} layout=\"vertical\"\r\n\t\t\tinitialValues={initialValues}\r\n\t\t\tonFinish={_commitForm}\r\n\t\t>\r\n\t\t\t<Row gutter={24}>\r\n\t\t\t\t<Col span={6}>\r\n\t\t\t\t\t<Form.Item \r\n\t\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\tvalidateFirst\r\n\t\t\t\t\t\trules={\r\n\t\t\t\t\t\t\t[{\r\n\t\t\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\t\t\tmessage: \"required\"\r\n\t\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\tpattern: /^[a-z][a-z0-9_ ]*$/i,\r\n\t\t\t\t\t\t\t\tmessage: \"invalid\",\r\n\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Input allowClear/>\r\n\t\t\t\t\t</Form.Item>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col span={10}>\r\n\t\t\t\t\t<Form.Item \r\n\t\t\t\t\t\tlabel=\"Group\"\r\n\t\t\t\t\t\tname=\"parent\"\r\n\t\t\t\t\t\tvalidateFirst\r\n\t\t\t\t\t\trules={\r\n\t\t\t\t\t\t\t[{\r\n\t\t\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\t\t\tmessage: \"required\"\r\n\t\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\tpattern: /^\\/[/a-zA-Z0-9_ ]*$/,\r\n\t\t\t\t\t\t\t\tmessage: \"invalid\",\r\n\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<GroupSelect/>\r\n\t\t\t\t\t</Form.Item>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col span={4}>\r\n\t\t\t\t\t<Form.Item \r\n\t\t\t\t\t\tlabel=\"Offset\"\r\n\t\t\t\t\t\tname=\"offset\"\r\n\t\t\t\t\t\tvalidateFirst\r\n\t\t\t\t\t\trules={\r\n\t\t\t\t\t\t\t[{\r\n\t\t\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\t\t\tmessage: \"required\",\r\n\t\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\tpattern: /^[0-9a-f]+$/i,\r\n\t\t\t\t\t\t\t\tmessage: \"not a hex number\",\r\n\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Input addonBefore=\"0x\" allowClear/>\r\n\t\t\t\t\t</Form.Item>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col span={4}>\r\n\t\t\t\t\t<Form.Item \r\n\t\t\t\t\t\tlabel=\"Size\"\r\n\t\t\t\t\t\tname=\"size\"\r\n\t\t\t\t\t\tvalidateFirst\r\n\t\t\t\t\t\trules={\r\n\t\t\t\t\t\t\t[{\r\n\t\t\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\t\t\tmessage: \"required\",\r\n\t\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\tpattern: /^[0-9]+$/,\r\n\t\t\t\t\t\t\t\tmessage: \"not an integer\",\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\tvalidator: (rule, value) => {\r\n\t\t\t\t\t\t\t\t\tif ((value - 1) & value) {\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(\"not power of 2\");\r\n\t\t\t\t\t\t\t\t\t} else if (value < 1 || value > MaxRegSize) {\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`not in range [1, ${MaxRegSize}]`);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t}]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Input allowClear/>\r\n\t\t\t\t\t</Form.Item>\r\n\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t<Form.Item \r\n\t\t\t\tlabel=\"Summary\"\r\n\t\t\t\tname=\"desc_short\"\r\n\t\t\t\tvalidateFirst\r\n\t\t\t\trules={\r\n\t\t\t\t\t[{\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\tmessage: \"required\"\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<Input allowClear/>\r\n\t\t\t</Form.Item>\r\n\t\t\t<Form.Item \r\n\t\t\t\tlabel=\"Detail\"\r\n\t\t\t\tname=\"desc_long\"\r\n\t\t\t>\r\n\t\t\t\t<Input.TextArea rows={4} />\r\n\t\t\t</Form.Item>\r\n\t\t\t<FieldCtrl commitField={_commitField}/>\r\n\t\t\t<FieldList commitField={_commitField}/>\r\n\t\t</Form>\r\n\t);\r\n}\r\n\r\nfunction FieldCtrl(props) {\r\n\tconst shouldUpdate = (prev, current) => { // when fields or size are changed\r\n\t\tif (prev.size !== current.size) return true;\r\n\r\n\t\tconst [a, b] = [prev.fields, current.fields];\r\n\r\n\t\tif (a.length !== b.length) return true;\r\n\t\tfor (let i = 0; i < a.length; i++) {\r\n\t\t\tif (a[i].bits[0] !== b[i].bits[0] ||\r\n\t\t\t\ta[i].bits[1] !== b[i].bits[1] ||\r\n\t\t\t\ta[i].name.localeCompare(b[i].name) !== 0 ||\r\n\t\t\t\ta[i].meaning.localeCompare(b[i].meaning) !== 0) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\r\n\tconst _render = (form) => {\r\n\t\tconst byteCount = form.getFieldValue(\"size\");\r\n\t\treturn (\r\n\t\t\t<Row type=\"flex\" justify=\"center\" style={{marginBottom: 24, paddingBottom: 8}}>\r\n\t\t\t\t<Form.Item name=\"fieldCtrl\">\r\n\t\t\t\t\t<BitEditor \r\n\t\t\t\t\t\tcellWidth={30} bitsPerRow={16} byteCount={byteCount} \r\n\t\t\t\t\t\tform={form} \r\n\t\t\t\t\t\tcommitField={props.commitField}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t</Row>\r\n\t\t);\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<Form.Item noStyle shouldUpdate={shouldUpdate}> \r\n\t\t\t{_render} \r\n\t\t</Form.Item>\r\n\t);\r\n}\r\n\r\nfunction FieldList(props) {\r\n\tconst shouldUpdate = (prev, current) => {\r\n\t\tconst [a, b] = [prev.fieldCtrl, current.fieldCtrl];\r\n\r\n\t\tif (a.mode !== b.mode || \r\n\t\t\ta.activeKey !== b.activeKey ||\r\n\t\t\ta.selectedBits.length !== b.selectedBits.length) {\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < a.selectedBits.length; i++) {\r\n\t\t\tif (a.selectedBits[i] !== b.selectedBits[i]) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tconst _render = (form) => {\r\n\t\tconst fields = form.getFieldValue(\"fields\");\r\n\t\tconst editors = fields.map((_, i) => (\r\n\t\t\t<FieldEditor key={i} form={form} fieldIdx={i} commitField={props.commitField}/>\r\n\t\t));\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t{editors}\r\n\t\t\t\t<FieldEditor form={form} fieldIdx={NaN} commitField={props.commitField}/>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<Form.Item noStyle shouldUpdate={shouldUpdate}>\r\n\t\t\t{_render}\r\n\t\t</Form.Item>\r\n\t)\r\n}\r\n\r\nfunction FieldEditor(props) {\r\n\tconst {form, fieldIdx} = props;\r\n\r\n\tconst fieldCtrl = form.getFieldValue([\"fieldCtrl\"]);\r\n\tconst isNewField = isNaN(fieldIdx);\r\n\tconst fieldPath = isNewField ? [\"newField\"] : [\"fields\", fieldIdx];\r\n\tconst isActive = (()=>{\r\n\t\tif (fieldCtrl.mode === \"editing\" && fieldCtrl.activeKey === fieldIdx) return true;\r\n\t\tif (fieldCtrl.mode === \"adding\" && isNewField) return true;\r\n\t\treturn false;\r\n\t})();\r\n\r\n\t// Don't bother to validate non-active fields.\r\n\tconst fieldNameRule = isActive ? [{\r\n\t\trequired: true,\r\n\t\twhitespace: true,\r\n\t\tmessage: \"required\"\r\n\t}, {\r\n\t\tpattern: /^[a-zA-Z][a-zA-Z0-9_ ]*$/,\r\n\t\tmessage: \"invalid\"\r\n\t}] : [];\r\n\r\n\tconst handleConfirm = () => {\r\n\t\tprops.commitField(fieldIdx);\r\n\t}\r\n\r\n\tconst handleDelete = () => {\r\n\t\tform.setFieldsValue({\r\n\t\t\tfields: form.getFieldValue(\"fields\").filter((_,i)=>i!==fieldIdx),\r\n\t\t\tfieldCtrl: idleFieldCtrl,\r\n\t\t\tnewField: EmptyNewField,\r\n\t\t})\r\n\t}\r\n\r\n\tconst ConfirmBtn = () =>\r\n\t\t<Button \r\n\t\t\ttype=\"link\" \r\n\t\t\ticon={<CheckOutlined />} \r\n\t\t\tdisabled={fieldCtrl.selectedBits.length !== 2}\r\n\t\t\tonClick={handleConfirm}\r\n\t\t/>;\r\n\r\n\tconst DeleteBtn = () => isNewField ? (\r\n\t\t<Button type=\"link\" icon={<CloseOutlined/>} onClick={handleDelete}/>\r\n\t) : (\r\n\t\t<Popconfirm \r\n\t\t\ttitle={`Are you sure to delete this field?`} \r\n\t\t\tokText=\"Yes\" cancelText=\"No\"\r\n\t\t\tonConfirm={handleDelete}\r\n\t\t>\r\n\t\t\t<Button type=\"link\" icon={<DeleteOutlined/>} />\r\n\t\t</Popconfirm>\r\n\t);\r\n\t\r\n\treturn (\r\n\t\t<Card \r\n\t\t\tstyle={isActive ? {} : {display: \"none\"}}\r\n\t\t\tsize=\"small\"\r\n\t\t\ttitle={isNewField ? \"Add Field\" : \"Edit Field\"}\r\n\t\t\textra={<><ConfirmBtn/><DeleteBtn/></>}\r\n\t\t>\r\n\t\t\t<Form.Item name={[...fieldPath, \"bits\", 0]} style={{display: \"none\"}}>\r\n\t\t\t\t<Input />\r\n\t\t\t</Form.Item>\r\n\t\t\t<Form.Item name={[...fieldPath, \"bits\", 1]} style={{display: \"none\"}}>\r\n\t\t\t\t<Input />\r\n\t\t\t</Form.Item>\r\n\t\t\t<Form.Item label=\"Field Name\" name={[...fieldPath, \"name\"]} rules={fieldNameRule}>\r\n\t\t\t\t<Input allowClear />\r\n\t\t\t</Form.Item>\r\n\t\t\t<Form.Item label=\"Field Description\" name={[...fieldPath, \"meaning\"]}>\r\n\t\t\t\t<Input.TextArea rows={1} />\r\n\t\t\t</Form.Item>\r\n\t\t\t\r\n\t\t\t<Divider orientation=\"left\">Named Constants</Divider>\r\n\t\t\t\r\n\t\t\t<ConstantList form={form} fieldPath={fieldPath}/>\r\n\t\t</Card>\r\n\t)\r\n}\r\n\r\nfunction ConstantList(props) {\r\n\tconst {form, fieldPath} = props;\r\n\treturn (\r\n\t\t<Form.List name={[...fieldPath, \"value\"]}>{(entries, {add, remove}) => {\r\n\t\t\tconst constants = form.getFieldValue([...fieldPath, \"value\"]);\r\n\t\t\treturn (<>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<ConstantInput add={add} constants={constants}/>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<div>\r\n\t\t\t\t<Row className=\"constants-container\">\r\n\t\t\t\t\t{entries.map((entry, i) => (\r\n\t\t\t\t\t\t<ToggleTag \r\n\t\t\t\t\t\t\tkey={entry.key}\r\n\t\t\t\t\t\t\tname={constants[entry.name].name}\r\n\t\t\t\t\t\t\tvalue={parseNumberString(constants[entry.name].value)}\r\n\t\t\t\t\t\t\tclosable\r\n\t\t\t\t\t\t\tonClose={() => remove(entry.name)}\r\n\t\t\t\t\t\t\tstyle={{marginTop: 8}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Row>\r\n\t\t\t\t</div>\r\n\t\t\t</>)\r\n\t\t}}</Form.List>\r\n\t)\r\n}\r\n\r\nfunction ConstantInput({add, constants}) {\r\n\tconst [name, setName] = useState();\r\n\tconst [value, setValue] = useState();\r\n\tconst [error, setError] = useState();\r\n\r\n\tconst validator = new schema({\r\n\t\tname: [{\r\n\t\t\trequired: true,\r\n\t\t\twhitespace: true,\r\n\t\t\tmessage: \"* Name is required\",\r\n\t\t}, {\r\n\t\t\tpattern: /^[a-z][0-9a-z]*$/i,\r\n\t\t\tmessage: \"* Invalid Name\",\r\n\t\t}, {\r\n\t\t\tvalidator: (rule, s) => !constants || !constants.some(constant => constant.name === s.trim()),\r\n\t\t\tmessage: \"* Name already in use\",\r\n\t\t}],\r\n\t\tvalue: [{\r\n\t\t\trequired: true,\r\n\t\t\twhitespace: true,\r\n\t\t\tmessage: \"* Value is required\",\r\n\t\t},{\r\n\t\t\tvalidator: (rule, s) => isNumberString(s),\r\n\t\t\tmessage: \"* Value is not a valid decimal, hex, octal or binary number\",\r\n\t\t}]\r\n\t})\r\n\t\r\n\tconst handleAdd = () => {\r\n\t\tvalidator.validate(\r\n\t\t\t{name, value}, \r\n\t\t\t{first: true, firstFields: true}\r\n\t\t).then(() => {\r\n\t\t\t// name is trim'ed, but value is kept as original radix.\r\n\t\t\tadd({name: name.trim(), value});\r\n\t\t\tsetName();\r\n\t\t\tsetValue();\r\n\t\t\tsetError();\r\n\t\t}).catch(({errors, fields}) => {\r\n\t\t\tsetError(errors[0].message)\r\n\t\t})\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<Input.Group compact style={{marginBottom: 16}}>\r\n\t\t\t<Input placeholder=\"Name\" id=\"constant-left\" onInput={e=>setName(e.target.value)} value={name}/>\r\n\t\t\t<Input placeholder=\"&equiv;\" disabled id=\"constant-middle\"/>\r\n\t\t\t<Input placeholder=\"Value\" id=\"constant-right\" onInput={e=>setValue(e.target.value)} value={value}/>\r\n\t\t\t<Button type=\"primary\" onClick={handleAdd}>Add</Button>\r\n\t\t\t<Typography.Text type=\"danger\" className=\"constant-error\">{error}</Typography.Text>\r\n\t\t</Input.Group>\r\n\t)\r\n}\r\n\r\nexport function RegEditorModal(props) {\r\n\tconst {parent, activePath, reg, title, hide} = props;\r\n\tconst [form] = Form.useForm();\r\n\t\r\n\tconst modalProps = {\r\n\t\ttitle: title,\r\n\t\twidth: 960,\r\n\t\t// The visibility is controlled by mount / unmount of the component instead \r\n\t\t// of the `visible` props, so we get a new `form` for each register. If we \r\n\t\t// re-use the `form`, the `initialValue` of the `form` will not be set\r\n\t\t// correctly. This is likely a bug of antd.\r\n\t\tvisible: true,\r\n\t\tmaskClosable: false,\r\n\t\tonOk: form.submit,\r\n\t\tonCancel: hide,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Modal {...modalProps}>\r\n\t\t\t<RegEditor form={form} parent={parent} activePath={activePath} reg={reg} onFinish={hide}/>\r\n\t\t</Modal>\r\n\t);\r\n};","import React, { useEffect, useState } from 'react';\r\n\r\nimport { Row, Typography, Breadcrumb, Button, Skeleton, Table, Tag, Tabs, Form, Input, Badge, Checkbox, AutoComplete, Collapse  } from 'antd';\r\nimport { EditOutlined, NumberOutlined, MenuOutlined, DeleteOutlined, PushpinTwoTone } from '@ant-design/icons';\r\n\r\nimport { BitViewer } from './BitGrid';\r\nimport { RegEditorModal } from './RegEditor';\r\nimport { parseNumberString } from './Utils';\r\n\r\nimport regDb from '../RegDb';\r\n\r\nimport './RegisterViewer.css';\r\n\r\nconst { Title, Paragraph } = Typography;\r\n\r\nexport default function RegView(props) {\r\n\tconst {path} = props;\r\n\tconst [data, setData] = useState();\r\n\t\r\n\tconst fetchData = async (key) => {\r\n\t\tsetData(await regDb.get(key));\r\n\t}\r\n\r\n\t// `fetchData` on `path` change\r\n\tuseEffect(() => {fetchData(path)}, [path])\r\n\r\n\t// listen to DB change\r\n\tuseEffect(() => {\r\n\t\tconst handleUpdate = ({oldData, newData}) => {\r\n\t\t\tif (path === oldData.parent + oldData.name) {\r\n\t\t\t\tfetchData(newData.parent + newData.name)\r\n\t\t\t} \r\n\t\t}\r\n\t\tregDb.subscribe(handleUpdate, \"update\");\r\n\t\treturn () => {\r\n\t\t\tregDb.unsubscribe(handleUpdate, \"update\");\r\n\t\t}\r\n\t}, [])\r\n\r\n\treturn data ? <Viewer data={data}/> : <Skeleton active paragraph={{ rows: 8 }}/>;\r\n}\r\n\r\nfunction Viewer({data}) {\r\n\tconst [showRegModel, setShowRegModel] = useState(false);\r\n\tconst fields = [...data.fields].reverse();\r\n\r\n\tconst Path = () => {\r\n\t\tconst path = data.parent + data.name;\r\n\t\tconst segs = path.split(\"/\").filter(e => e !== \"\");\r\n\t\treturn (\r\n\t\t\t<Breadcrumb>{\r\n\t\t\t\tsegs.map((seg, i) => (\r\n\t\t\t\t\t<Breadcrumb.Item key={i}>{seg}</Breadcrumb.Item>\r\n\t\t\t\t))\r\n\t\t\t}</Breadcrumb>\r\n\t\t);\r\n\t}\r\n\t\r\n\tconst Description = () => (\r\n\t\t<article>\r\n\t\t\t<header>\r\n\t\t\t\t<Path/>\r\n\t\t\t\t<div className=\"title-container\">\r\n\t\t\t\t\t<Title level={4}>\r\n\t\t\t\t\t\t{data.desc_short}\r\n\t\t\t\t\t\t<span className=\"address\">Size: {data.size}</span>\r\n\t\t\t\t\t\t<span className=\"address\">Offset: 0x{data.offset.toUpperCase()}</span>\r\n\t\t\t\t\t</Title>\r\n\t\t\t\t\t<Button icon={<EditOutlined />} onClick={()=>setShowRegModel(true)}>Edit</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\t\t\t<main>\r\n\t\t\t\t<Paragraph>{data.desc_long}</Paragraph>\r\n\t\t\t</main>\r\n\t\t</article>\r\n\t)\r\n\t\r\n\treturn (\r\n\t\t<div className=\"reg-content\">\r\n\t\t\t<Description/>\r\n\t\t\t<Row type=\"flex\" justify=\"center\" style={{marginBottom: 24, paddingBottom: 8}}>\r\n\t\t\t\t<AdaptiveBitViewer byteCount={data.size} fields={data.fields || []}/>\r\n\t\t\t</Row>\r\n\t\t\t<Tabs defaultActiveKey=\"1\">\r\n\t\t\t\t<Tabs.TabPane tab=\"Fields\" key=\"1\">\r\n\t\t\t\t\t<FieldTable fields={fields}/>\r\n\t\t\t\t</Tabs.TabPane>\r\n\t\t\t\t<Tabs.TabPane tab=\"Encoder\" key=\"2\">\r\n\t\t\t\t\t<EncoderTable fields={fields}/>\r\n\t\t\t\t</Tabs.TabPane>\r\n\t\t\t\t<Tabs.TabPane tab=\"Decoder\" key=\"3\">\r\n\t\t\t\t\t<DecoderTable fields={fields}/>\r\n\t\t\t\t</Tabs.TabPane>\r\n\t\t\t</Tabs>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t{showRegModel && <RegEditorModal\r\n\t\t\t\tparent={data.parent}\r\n\t\t\t\treg={data}\r\n\t\t\t\ttitle=\"Edit Register\"\r\n\t\t\t\thide={()=>setShowRegModel(false)}\r\n\t\t\t/>}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction AdaptiveBitViewer({byteCount, fields}) {\r\n\t// media query\r\n\t//  - 320: width of side bar\r\n\t//  - 600: width of BitViewer if we put 16bits per row\r\n\t//  - 1080: width of BitViewer if we put 32bits per row\r\n\tconst cellWidth = 30;\r\n\tconst mql16 = window.matchMedia(`(min-width: ${320 + 600}px)`);\r\n\tconst mql32 = window.matchMedia(`(min-width: ${320 + 1080}px)`);\r\n\t\r\n\tconst [can16, setCan16] = useState(mql16.matches);\r\n\tconst [can32, setCan32] = useState(mql32.matches);\r\n\r\n\tconst handleSizeChange16 = (e) => setCan16(e.matches);\r\n\tconst handleSizeChange32 = (e) => setCan32(e.matches);\r\n\r\n\tuseEffect(() => {\r\n\t\tmql16.addListener(handleSizeChange16);\r\n\t\tmql32.addListener(handleSizeChange32);\r\n\t\treturn () => {\r\n\t\t\tmql16.removeListener(handleSizeChange16);\r\n\t\t\tmql32.removeListener(handleSizeChange32);\r\n\t\t}\r\n\t}, []);\t\r\n\r\n\tconst getBitsPerRow = () => {\r\n\t\tif (can32) return 32;\r\n\t\tif (can16) return 16;\r\n\t\treturn 8;\r\n\t}\t\r\n\t\r\n\treturn (\r\n\t\t<BitViewer\r\n\t\t\tcellWidth={cellWidth} \r\n\t\t\tbitsPerRow={getBitsPerRow()}\r\n\t\t\tbyteCount={byteCount}\r\n\t\t\tfields={fields}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nfunction FieldTable({fields}) {\r\n\tconst columns = [{\r\n\t\tkey: \"name\",\r\n\t\ttitle: \"Name\",\r\n\t\tdataIndex: \"name\",\r\n\t}, {\r\n\t\tkey: \"bits\",\r\n\t\ttitle: \"Bits\",\r\n\t\tdataIndex: \"bits\",\r\n\t\twidth: 60,\r\n\t\trender: bits => `${bits[1]} : ${bits[0]}`,\r\n\t}, {\r\n\t\tkey: \"meaning\",\r\n\t\ttitle: \"Meaning\",\r\n\t\tdataIndex: \"meaning\",\r\n\t\trender: (text, record) => (<>\r\n\t\t\t{text || \"N/A\"}\r\n\t\t\t<br/>\r\n\t\t\t{record.value && record.value.map(\r\n\t\t\t\t(v, i) => <ToggleTag key={i} name={v.name} value={parseNumberString(v.value)}/>\r\n\t\t\t)}\r\n\t\t</>)\r\n\t}];\r\n\t\r\n\treturn (\r\n\t\t<Table \r\n\t\t\trowKey=\"name\" \r\n\t\t\tdataSource={fields} \r\n\t\t\tcolumns={columns}\r\n\t\t\tpagination={false}\r\n\t\t\tsize=\"small\"\r\n\t\t/>\r\n\t);\r\n}\r\n\r\nfunction ConstantTag(props) {\r\n\tconst {name, value, hex, ...rest} = props;\r\n\treturn (\r\n\t\t<Tag color={hex ? \"green\" : \"blue\"} {...rest}>\r\n\t\t\t{name} &equiv; {hex ? \"0x\" + value.toString(16).toUpperCase() : value}\r\n\t\t</Tag>\r\n\t);\r\n}\r\n\r\nexport function ToggleTag(props) {\r\n\tconst {hex, className, ...rest} = props;\r\n\tconst [isHex, setIsHex] = useState(hex);\r\n\tconst tagProps = {\r\n\t\t...rest,\r\n\t\thex: isHex,\r\n\t\tclassName: className ? className + \" with-hover-pointer\" : \"with-hover-pointer\",\r\n\t\tonClick: (e) => {\r\n\t\t\tprops.onClick && props.onClick(e);\r\n\t\t\tsetIsHex(!isHex);\r\n\t\t},\r\n\t\tstyle: {marginTop: 8},\r\n\t};\r\n\treturn <ConstantTag {...tagProps}/>;\r\n}\r\n\r\nfunction DotTag(props) {\r\n\tconst {dot, ...rest} = props;\r\n\r\n\treturn (\r\n\t\t<Badge dot count={dot ? 1 : 0}>\r\n\t\t\t<ConstantTag {...rest}/>\r\n\t\t</Badge>\r\n\t);\r\n}\r\n\r\nfunction DotValue(props) {\r\n\tconst {dot, hex, value} = props;\r\n\r\n\treturn (\r\n\t\t<Badge dot count={dot ? 1 : 0}>\r\n\t\t\t<span style={{marginRight: \"8px\"}}>\r\n\t\t\t\t{hex ? \"0x\" + value.toString(16).toUpperCase() : value}\r\n\t\t\t</span>\r\n\t\t</Badge>\r\n\t)\r\n}\r\n\r\nfunction Code(props) {\r\n\treturn <Typography.Text code>{props.children}</Typography.Text>\r\n}\r\n\r\nfunction EncoderTable({fields}) {\r\n\tconst [form] = Form.useForm();\r\n\tconst [source, setSource] = useState([]);\r\n\tconst [sequence, setSequence] = useState(0);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSource([]);\r\n\t}, [fields])\r\n\t\r\n\tconst handleAdd = () => {\r\n\t\tsetSource([\r\n\t\t\t...source, \r\n\t\t\t{\r\n\t\t\t\tkey: sequence,\r\n\t\t\t\tidx: sequence,\r\n\t\t\t}\r\n\t\t]);\r\n\t\tsetSequence(sequence + 1);\r\n\t}\r\n\r\n\tconst handleRemove = (idx) => {\r\n\t\tsetSource(source.filter(x => x.idx !== idx));\r\n\t\tconst {[idx]:_, ...values} = form.getFieldsValue();\r\n\t\tform.setFieldsValue(values);\r\n\t}\r\n\t\r\n\tconst DeleteBtn = ({index}) => (\r\n\t\t<Button type=\"link\" icon={<DeleteOutlined />} onClick={()=>handleRemove(index)}/>\r\n\t);\r\n\t\r\n\tconst columns = [{\r\n\t\tkey: \"value\",\r\n\t\ttitle: <NumberOutlined />,\r\n\t\tonCell: (record) => ({\r\n\t\t\tfields: fields,\r\n\t\t\tindex: record.idx,\r\n\t\t\tname: \"value\",\r\n\t\t\tform: form,\r\n\t\t})\r\n\t}, ...fields.map((field, i) => ({\r\n\t\tkey: i,\r\n\t\ttitle: field.name,\r\n\t\tonCell: (record) => ({\r\n\t\t\tfields: fields,\r\n\t\t\tindex: record.idx,\r\n\t\t\tname: \"_\"+field.name,\r\n\t\t\tform: form,\r\n\t\t})\r\n\t})), {\r\n\t\tkey: \"action\",\r\n\t\ttitle: <MenuOutlined />,\r\n\t\talign: \"center\",\r\n\t\trender: (text, record) => <DeleteBtn index={record.idx}/>,\r\n\t}];\r\n\r\n\treturn (<>\r\n\t\t<Button onClick={handleAdd}>Add Row</Button>\r\n\t\t<Form form={form}>\r\n\t\t\t<Table\r\n\t\t\t\tdataSource={source}\r\n\t\t\t\tcolumns={columns}\r\n\t\t\t\tcomponents={{\r\n\t\t\t\t\tbody: {\r\n\t\t\t\t\t\tcell: EncoderCell,\r\n\t\t\t\t\t},\r\n\t\t\t\t}}\r\n\t\t\t\tpagination={false}\r\n\t\t\t\tsize=\"small\"\r\n\t\t\t\tstyle={{marginTop: \"16px\"}}\r\n\t\t\t/>\r\n\t\t\t<Collapse bordered={false}>\r\n\t\t\t\t<Collapse.Panel header=\"About input format...\">\r\n\t\t\t\t\t<p>Following number formats are accepted. They are case insensitive. Invalid inputs are treated as zero.</p>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>Decimal: <Code>1024</Code></li>\r\n\t\t\t\t\t\t<li>Hex: <Code>0x87d</Code> or <Code>87dh</Code></li>\r\n\t\t\t\t\t\t<li>Octal: <Code>046</Code></li>\r\n\t\t\t\t\t\t<li>Binary: <Code>0b1101</Code></li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</Collapse.Panel>\r\n\t\t\t</Collapse>\r\n\t\t</Form>\r\n\t</>)\r\n}\r\n\r\nfunction EncoderCell(props) {\r\n\tconst {fields, index, name, form, children, ...rest} = props;\r\n\t\r\n\tconst updateRow = (values) => {\r\n\t\tconst row = form.getFieldValue([index]);\r\n\t\tform.setFieldsValue({\r\n\t\t\t[index]: {row, ...values},\r\n\t\t});\r\n\t}\r\n\t\r\n\tconst onValueChange = (e) => {\r\n\t\tconst row = form.getFieldValue([index]);\r\n\t\tconst value = parseNumberString(\"0x\"+row[\"value\"]) || 0;\r\n\t\tupdateRow(fields.reduce((acc, cur) => {\r\n\t\t\tconst shift = cur.bits[0];\r\n\t\t\tconst mask = (1 << (cur.bits[1] - cur.bits[0] + 1)) - 1\r\n\t\t\tconst k = \"_\" + cur.name;\r\n\t\t\tconst v = (value >> shift) & mask;\r\n\t\t\treturn {...acc, [k]: v};\r\n\t\t}, {}))\r\n\t}\r\n\t\r\n\tconst onFieldChange = (e) => {\r\n\t\tconst row = form.getFieldValue([index]);\r\n\t\tupdateRow({\r\n\t\t\tvalue: fields.reduce((acc, cur) => {\r\n\t\t\t\tconst shift = cur.bits[0];\r\n\t\t\t\tconst mask = (1 << (cur.bits[1] - cur.bits[0] + 1)) - 1\r\n\t\t\t\tconst k = \"_\" + cur.name;\r\n\t\t\t\tconst v = ((parseNumberString(row[k] || \"0\") || 0) & mask) << shift;\r\n\t\t\t\treturn acc | v;\r\n\t\t\t}, 0).toString(16).toUpperCase()\r\n\t\t});\r\n\t}\r\n\r\n\tconst getOptions = (() => {\r\n\t\tif (!fields || name === \"value\") return [];\r\n\t\tconst entry = fields.find(x => \"_\" + x.name === name);\r\n\t\tif (!entry || !entry.value) return [];\r\n\t\treturn entry.value.map(({name, value}) => ({\r\n\t\t\tvalue: value,\r\n\t\t\tlabel: (\r\n\t\t\t\t<div\r\n\t\t\t\t  style={{\r\n\t\t\t\t\tdisplay: 'flex',\r\n\t\t\t\t\tjustifyContent: 'space-between',\r\n\t\t\t\t  }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span>{name}</span>\r\n\t\t\t\t\t<span>&equiv; {value}</span>\r\n\t\t\t\t</div>\r\n\t\t\t),\r\n\t\t}));\r\n\t});\r\n\t\r\n\tconst content = form ? (\r\n\t\t<Form.Item name={[index, name]} style={{margin: 0,}}>\r\n\t\t\t<AutoComplete \r\n\t\t\t\toptions={getOptions()} \r\n\t\t\t\tonChange={name === \"value\" ? onValueChange : onFieldChange}\r\n\t\t\t>\r\n\t\t\t\t<Input addonBefore={name === \"value\" ? \"0x\" : \"\"}/>\r\n\t\t\t</AutoComplete>\r\n\t\t</Form.Item>\r\n\t) : children;\r\n\t\r\n\treturn <td {...rest}>{content}</td>;\r\n}\r\n\r\nfunction DecoderTable({fields}) {\r\n\tconst [form] = Form.useForm();\r\n\tconst [source, setSource] = useState([]);\r\n\tconst [pin, setPin] = useState(0);\r\n\tconst [otherIdx, setOtherIdx] = useState(NaN);\r\n\tconst [showHex, setShowHex] = useState(fields.reduce((acc, cur) => {\r\n\t\treturn {...acc, [cur.name]: false};\r\n\t}, {}));\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSource([]);\r\n\t\tsetPin(0);\r\n\t\tsetOtherIdx(NaN);\r\n\t}, [fields])\r\n\r\n\tconst constants = fields.reduce((acc, cur) => {\r\n\t\treturn {...acc, [cur.name]: cur.value};\r\n\t}, {});\r\n\r\n\tconst decodeValue = (value) => fields.reduce((acc, cur) => {\r\n\t\tconst k = \"_\" + cur.name;\r\n\t\tconst v = (value >> cur.bits[0]) & ((1 << (cur.bits[1] - cur.bits[0] + 1)) - 1);\r\n\t\treturn {...acc, [k]: v};\r\n\t}, {});\r\n\t\r\n\tconst handleAddValue = ({value}) => {\r\n\t\tform.resetFields();\r\n\t\tconsole.log(decodeValue(parseInt(value, 16)))\r\n\t\tsetSource([\r\n\t\t\t...source, \r\n\t\t\t{\r\n\t\t\t\tkey: source.length,\r\n\t\t\t\tvalue: value,\r\n\t\t\t\t...decodeValue(parseInt(value, 16)),\r\n\t\t\t}\r\n\t\t]);\r\n\t}\r\n\r\n\tconst handleRemoveValue = (e, idx) => {\r\n\t\te.stopPropagation(); // so we don't trigger `onClick` of the row\r\n\t\tsetPin(pin < idx ? pin : Math.max(0, pin - 1));\r\n\t\tsetOtherIdx(NaN);\r\n\t\tsetSource(\r\n\t\t\tsource.filter((_,i)=>i!==idx).map((x, i) => ({\r\n\t\t\t\t...x,\r\n\t\t\t\tkey: i,\r\n\t\t\t}))\r\n\t\t);\r\n\t}\r\n\r\n\tconst AddValueForm = () => (\r\n\t\t<Form form={form} layout=\"inline\" onFinish={handleAddValue}>\r\n\t\t\t<Form.Item \r\n\t\t\t\tname=\"value\" validateFirst \r\n\t\t\t\trules={\r\n\t\t\t\t\t[{\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\tmessage: \"required\",\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\tpattern: /^[0-9a-f]+$/i,\r\n\t\t\t\t\t\tmessage: \"not a hex number\",\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t>\r\n\t\t\t\t<Input addonBefore=\"0x\" allowClear autoFocus />\r\n\t\t\t</Form.Item>\r\n\t\t\t<Form.Item>\r\n\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n\t\t\t</Form.Item>\r\n\t\t</Form>\r\n\t);\r\n\r\n\tconst PushPin = ({index}) => (\r\n\t\tindex === pin && <PushpinTwoTone twoToneColor=\"#f50\"/>\r\n\t);\r\n\t\r\n\tconst DeleteBtn = ({index}) => (\r\n\t\t<Button type=\"link\" icon={<DeleteOutlined />} onClick={(e)=>handleRemoveValue(e, index)}/>\r\n\t);\r\n\r\n\tconst Field = ({index, name, value}) => {\r\n\t\tconst key = \"_\" + name;\r\n\t\tconst hex = showHex[name];\r\n\t\tconst showBadge = (\r\n\t\t\t!isNaN(otherIdx) &&\r\n\t\t\t(index === pin || index === otherIdx) &&\r\n\t\t\tsource[pin][key] !== source[otherIdx][key]\r\n\t\t);\r\n\t\t\r\n\t\tif (constants[name]) {\r\n\t\t\t// `==` as they are different types (string vs int)\r\n\t\t\t// eslint-disable-next-line\r\n\t\t\tconst entry = constants[name].find(x => parseNumberString(x.value) == value);\r\n\t\t\tif (entry) {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<DotTag \r\n\t\t\t\t\t\tclassName=\"with-hover-pointer\"\r\n\t\t\t\t\t\tdot={showBadge} hex={hex} \r\n\t\t\t\t\t\tname={entry.name} \r\n\t\t\t\t\t\tvalue={parseNumberString(entry.value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn <DotValue dot={showBadge} hex={hex} value={value}/>;\r\n\t}\r\n\r\n\tconst columns = [{\r\n\t\tkey: \"pin\",\r\n\t\talign: \"center\",\r\n\t\twidth: 40,\r\n\t\trender: (text, record, index) => <PushPin index={index}/>,\r\n\t}, {\r\n\t\tkey: \"value\",\r\n\t\ttitle: <NumberOutlined />,\r\n\t\tdataIndex: \"value\",\r\n\t\trender: (text) => \"0x\" + text.toUpperCase(),\r\n\t}, ...fields.map((field, i) => ({\r\n\t\tkey: i,\r\n\t\ttitle: field.name,\r\n\t\tdataIndex: \"_\"+field.name,\r\n\t\trender: (text, record, index) => <Field index={index} name={field.name} value={text}/>\r\n\t})), {\r\n\t\tkey: \"action\",\r\n\t\ttitle: <MenuOutlined />,\r\n\t\talign: \"center\",\r\n\t\twidth: 40,\r\n\t\trender: (text, record, index) => <DeleteBtn index={index}/>,\r\n\t},];\r\n\r\n\tconst summary = () => (\r\n\t\t<tr>\r\n\t\t\t<th colSpan={2} style={{padding: \"8px\"}}>Show Hex</th>\r\n\t\t\t{fields.map((field, i) => (<td key={i} style={{padding: \"8px\"}}>\r\n\t\t\t\t<Checkbox onChange={(e)=>{\r\n\t\t\t\t\tconst v = {...showHex};\r\n\t\t\t\t\tv[field.name] = e.target.checked;\r\n\t\t\t\t\tsetShowHex(v)\r\n\t\t\t\t}}/>\r\n\t\t\t</td>))}\r\n\t\t\t<td/>\r\n\t\t</tr>\r\n\t)\r\n\r\n\treturn (<>\r\n\t\t<AddValueForm/>\r\n\t\t<Table\r\n\t\t\tdataSource={source}\r\n\t\t\tcolumns={columns}\r\n\t\t\tsummary={summary}\r\n\t\t\tpagination={false}\r\n\t\t\tsize=\"small\"\r\n\t\t\tstyle={{marginTop: \"16px\"}}\r\n\t\t\tonRow={(record, rowIndex) => ({\r\n\t\t\t\tclassName: \"with-hover-pointer\",\r\n\t\t\t\tonClick: () => setPin(rowIndex),\r\n\t\t\t\tonMouseEnter: () => setOtherIdx(rowIndex),\r\n\t\t\t\tonMouseLeave: () => setOtherIdx(NaN),\r\n\t\t\t})}\r\n\t\t/>\r\n\t</>)\r\n}","import React from 'react';\r\n\r\n// antd\r\nimport { Modal, Form, Input, message, Typography } from 'antd';\r\n\r\nimport regDb, { KeyExistError } from '../RegDb';\r\nimport GroupSelect from './GroupSelect';\r\n\r\nimport './GroupEditor.css';\r\n\r\n//------------------------------------------------------------\r\n/*\r\n * Props:\r\n *   - data\r\n *      - undefined, create new group\r\n *      - otherwise, edit existing one\r\n *   - path\r\n *      - \r\n */\r\nexport default function GroupEditor(props) {\r\n\tconst {form, parent, grp, onFinish} = props;\r\n\tconst initialValues = grp ? {\r\n\t\t...grp,\r\n\t\tname: grp.name.slice(0, -1),\r\n\t} : { parent };\r\n\r\n\tconst _commitForm = async (value) => {\r\n\t\tconst data = {\r\n\t\t\tname: value.name + \"/\",\r\n\t\t\tparent: value.parent,\r\n\t\t\toffset: value.offset,\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (grp) { // update\r\n\t\t\t\tawait regDb.set(grp.parent + grp.name, data);\r\n\t\t\t} else { // create new\r\n\t\t\t\tawait regDb.add(data);\r\n\t\t\t}\r\n\t\t\tonFinish();\r\n\t\t} catch (e) {\r\n\t\t\tif (e instanceof KeyExistError) {\r\n\t\t\t\tmessage.error(\r\n\t\t\t\t\t<span>\r\n\t\t\t\t\t\tEntry with key <Typography.Text code>{e.message}</Typography.Text> is already exist\r\n\t\t\t\t\t</span>\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\tmessage.error(`${e.name}: ${e.message}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tconst formProps = {\r\n\t\tlabelCol:   { span: 4  },\r\n\t\twrapperCol: { span: 20 },\r\n\t\tform, \r\n\t\tinitialValues,\r\n\t\tonFinish: _commitForm,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Form {...formProps}>\r\n\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"Parent\"\r\n\t\t\t\tname=\"parent\"\r\n\t\t\t\trules={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\tmessage: \"required\"\r\n\t\t\t\t\t}\r\n\t\t\t\t]}\r\n\t\t\t>\r\n\t\t\t\t<GroupSelect except={grp ? grp.parent + grp.name : null}/>\r\n\t\t\t</Form.Item>\r\n\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"Name\"\r\n\t\t\t\tname=\"name\"\r\n\t\t\t\tvalidateFirst\r\n\t\t\t\trules={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\tmessage: \"required\"\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\tpattern: /^[a-zA-Z][a-zA-Z0-9_ ]*$/,\r\n\t\t\t\t\t\tmessage: \"invalid\",\r\n\t\t\t\t\t}\r\n\t\t\t\t]}\r\n\t\t\t>\r\n\t\t\t\t<Input allowClear/>\r\n\t\t\t</Form.Item>\r\n\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"Offset\"\r\n\t\t\t\tname=\"offset\"\r\n\t\t\t\tvalidateFirst\r\n\t\t\t\trules={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\tmessage: \"required\",\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\tpattern: /^[0-9a-f]+$/i,\r\n\t\t\t\t\t\tmessage: \"not a hex number\",\r\n\t\t\t\t\t}\r\n\t\t\t\t]}\r\n\t\t\t>\r\n\t\t\t\t<Input addonBefore=\"0x\" allowClear/>\r\n\t\t\t</Form.Item>\r\n\t\t</Form>\r\n\t)\r\n}\r\nexport function GroupEditorModal(props) {\r\n\tconst {parent, grp, title, hide} = props;\r\n\tconst [form] = Form.useForm();\r\n\r\n\tconst modalProps = {\r\n\t\ttitle: title,\r\n\t\twidth: 480,\r\n\t\tvisible: true, // see `RegEditorModal`\r\n\t\tmaskClosable: false,\r\n\t\tonOk: form.submit,\r\n\t\tonCancel: hide,\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<Modal {...modalProps}>\r\n\t\t\t<GroupEditor form={form} parent={parent} grp={grp} onFinish={hide}/>\r\n\t\t</Modal>\r\n\t);\r\n}","import { splitKey } from './Utils';\r\n\r\nlet siglofyName = (name) => {\r\n    return name.replace(/[^a-zA-Z0-9]+/gi, ' ').trim().split(' ').map(\r\n        // for each substring...\r\n        s => \r\n            // capitalize first character\r\n            s.charAt(0).toUpperCase() +\r\n            // if substring is all upper case, change remaining characters to all lower case\r\n            // otherwise, keep the remaining characters unchanged\r\n            (s === s.toUpperCase() ? s.slice(1).toLowerCase() : s.slice(1))\r\n    ).join('');\r\n}\r\n\r\nlet classifyName = (name) => {\r\n    return siglofyName(name) + 'Type';\r\n}\r\n\r\nlet forEachNode = (data, rootKey, func) => {\r\n    const root = data[rootKey];\r\n    func(root.node, root.address, root.children);\r\n    root.children.forEach(childKey => forEachNode(data, childKey, func));\r\n}\r\n\r\nlet forEachGroup = (data, rootKey, func) => {\r\n    forEachNode(data, rootKey, (node, address, children) => {\r\n        if (node.name.endsWith('/')) {\r\n            func(node, address, children);\r\n        }\r\n    });\r\n}\r\n\r\nlet forEachRegister = (data, rootKey, func) => {\r\n    forEachNode(data, rootKey, (node, address, children) => {\r\n        if (!node.name.endsWith('/')) {\r\n            func(node, address, children);\r\n        }\r\n    });\r\n}\r\n\r\nlet convertToJson = (data) => {\r\n    return JSON.stringify(data, null, 2);\r\n}\r\n\r\nlet convertToMacro = (data) => {\r\n    let result = '';\r\n\r\n    forEachRegister(data, '/', (node) => {\r\n        const nodeName = siglofyName(node.name)\r\n        \r\n        result += `// ${node.desc_short}\\n`;\r\n        result += `NN_USB_DEFINE_REG_OFFSET ( ${nodeName}, ${node.offset} );\\n`;\r\n        \r\n        node.fields.forEach((field) => {\r\n            const fieldName = siglofyName(field.name);\r\n            \r\n            result += `NN_USB_DEFINE_FIELD32    ( ${nodeName}, ${fieldName}, ${field.bits[1]}, ${field.bits[0]} );\\n`;\r\n        });\r\n        \r\n        result += '\\n';\r\n    })\r\n    \r\n    return result;\r\n}\r\n\r\n// The scheme generated by this method is deprecated now.\r\n// Please see convertToCpp() below for the current scheme.\r\nlet convertToTemplate = (data) => {\r\n    let result = '';\r\n    \r\n    // BOM\r\n    // result += '\\357\\273\\277';\r\n\r\n    // Copyright\r\n    result += \"/*--------------------------------------------------------------------------------*\\n\";\r\n    result += \"  Copyright (C)Nintendo All rights reserved.\\n\";\r\n    result += \"\\n\";\r\n    result += \"  These coded instructions, statements, and computer programs contain proprietary\\n\";\r\n    result += \"  information of Nintendo and/or its licensed developers and are protected by\\n\";\r\n    result += \"  national and international copyright laws. They may not be disclosed to third\\n\";\r\n    result += \"  parties or copied or duplicated in any form, in whole or in part, without the\\n\";\r\n    result += \"  prior written consent of Nintendo.\\n\";\r\n    result += \"\\n\";\r\n    result += \"  The content herein is highly confidential and should be handled accordingly.\\n\";\r\n    result += \" *--------------------------------------------------------------------------------*/\\n\";\r\n\r\n    // Nolint\r\n    result += \"\\n\";\r\n    result += \"// NOLINT(build/header_guard)\\n\";\r\n    result += \"\\n\";\r\n\r\n    let getLevel = (parentName) => {\r\n        try {\r\n            let level = 0;\r\n            for (let c of parentName) {\r\n                if (c === '/') {\r\n                    level += 1;\r\n                }\r\n            }\r\n            return level;\r\n        } catch (err) {\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    let getEnclosingName = (parentName) => {\r\n        return parentName.slice(1, -1).split('/').filter(s => s !== '').map((s, i) => `M${siglofyName(s)}<AddressPolicy${i+1}>`).join('::');\r\n    };\r\n\r\n    let getFactoryName = (path) => {\r\n        return siglofyName(splitKey(path)[1]);\r\n\r\n    };\r\n\r\n    let getClasslName = (path) => {\r\n        return \"M\" + getFactoryName(path);\r\n    };\r\n\r\n    const rootClassName = 'Register';\r\n\r\n    result += `class ${rootClassName} {\\n`;\r\n    result += `public:\\n`;\r\n    result += `    static const uintptr_t g_Address = 0;\\n`;\r\n    result += `\\n`;\r\n    result += `private:\\n`;\r\n    data['/'].children.forEach((child) => {\r\n        result += `    template <template<uintptr_t> class AddressPolicy> class ${getClasslName(child)};\\n`;\r\n    });\r\n    result += `\\n`;\r\n    result += `public:\\n`;\r\n    data['/'].children.forEach((child) => {\r\n        result += `\\n`;\r\n        result += `    /*\\n`;\r\n        result += `     * Child: ${child}\\n`;\r\n        result += `     */\\n`;\r\n        result += `\\n`;\r\n        result += `    template <template<uintptr_t> class AddressPolicy = Fixed>\\n`;\r\n        result += `    static ${getClasslName(child)}<AddressPolicy> ${getFactoryName(child)}();\\n`;\r\n        result += `\\n`;\r\n        result += `    template <template<uintptr_t> class AddressPolicy>\\n`;\r\n        result += `    static ${getClasslName(child)}<AddressPolicy> ${getFactoryName(child)}(uintptr_t n);\\n`;\r\n        \r\n    });\r\n    result += `};\\n`;\r\n\r\n    forEachGroup(data, '/', (node, address, children) => {\r\n        if (!node.parent) {\r\n            return;\r\n        }\r\n\r\n        const level = getLevel(node.parent);\r\n        const className = level ? getClasslName(node.parent + node.name) : rootClassName;\r\n        const enclosingName = rootClassName + (getEnclosingName(node.parent) ? '::' + getEnclosingName(node.parent) : '');\r\n        const baseClassName = `AddressPolicy${level}<0x${address.toString(16)}>`;\r\n\r\n        result += `\\n`;\r\n        result += `/*\\n`;\r\n        result += ` * ${(node.parent || \"\") + node.name}\\n`;\r\n        result += ` *   - Base:    0x${(address - parseInt(node.offset, 16)).toString(16)}\\n`\r\n        result += ` *   - Offset:  0x${node.offset}\\n`;\r\n        result += ` *   - Address: 0x${address.toString(16)}\\n`;\r\n        result += ` */\\n`;\r\n\r\n        \r\n        for (let i = 1; i <= level; i++) {\r\n            result += `template <template<uintptr_t> class AddressPolicy${i}>\\n`;\r\n        }\r\n        result += `class ${enclosingName}::${className} : public ${baseClassName} {\\n`;\r\n        result += `public:\\n`;\r\n        result += `    typedef ${enclosingName} ParentType;\\n`;\r\n        result += `    typedef ${baseClassName} BaseType;\\n`;\r\n        result += `    static const uintptr_t g_Offset = 0x${node.offset};\\n`;\r\n        result += `    static const uintptr_t g_Address = ParentType::g_Address + g_Offset;\\n`;\r\n        \r\n        result += `\\n`;\r\n        result += `private:\\n`;\r\n        children.forEach((child) => {\r\n            result += `    template <template<uintptr_t> class AddressPolicy> class ${getClasslName(child)};\\n`;\r\n        });\r\n        \r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        result += `    explicit ${className}(uintptr_t n)\\n`;\r\n        result += `        : BaseType(n)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        \r\n        children.forEach((child) => {\r\n            result += `\\n`;\r\n            result += `    /*\\n`;\r\n            result += `     * Child: ${child}\\n`;\r\n            result += `     */\\n`;\r\n            result += `\\n`;\r\n            result += `    template <template<uintptr_t> class AddressPolicy = Fixed>\\n`;\r\n            result += `    ${getClasslName(child)}<AddressPolicy> ${getFactoryName(child)}() const ;\\n`;\r\n            result += `\\n`;\r\n            result += `    template <template<uintptr_t> class AddressPolicy>\\n`;\r\n            result += `    ${getClasslName(child)}<AddressPolicy> ${getFactoryName(child)}(uintptr_t n) const;\\n`;\r\n            result += `\\n`;\r\n            result += `    template <>\\n`;\r\n            result += `    ${getClasslName(child)}<Fixed> ${getFactoryName(child)}() const\\n`;\r\n            result += `    {\\n`;\r\n            result += `        return ${getClasslName(child)}<Fixed>(this->GetAddress() - g_Address);\\n`\r\n            result += `    }\\n`;\r\n            result += `\\n`;\r\n            result += `    template <>\\n`;\r\n            result += `    ${getClasslName(child)}<At> ${getFactoryName(child)}(uintptr_t address) const\\n`;\r\n            result += `    {\\n`;\r\n            result += `        return ${getClasslName(child)}<At>(address);\\n`\r\n            result += `    }\\n`;\r\n            result += `\\n`;\r\n            result += `    template <>\\n`;\r\n            result += `    ${getClasslName(child)}<Offset> ${getFactoryName(child)}(uintptr_t offset) const\\n`;\r\n            result += `    {\\n`;\r\n            result += `        return ${getClasslName(child)}<Offset>(this->GetAddress() - g_Address + offset);\\n`\r\n            result += `    }\\n`;\r\n        });\r\n        \r\n        result += `};\\n`;\r\n    });\r\n\r\n    forEachRegister(data, '/', (node, address) => {\r\n        const level = getLevel(node.parent);\r\n        const className = getClasslName(node.parent + node.name);\r\n        const enclosingName = rootClassName + (getEnclosingName(node.parent) ? '::' + getEnclosingName(node.parent) : '');\r\n        const baseClassName = `AddressPolicy${level}<0x${address.toString(16)}>`;\r\n\r\n        result += `\\n`;\r\n        result += `/*\\n`;\r\n        result += ` * ${node.parent + node.name}\\n`;\r\n        result += ` *   - Base:    0x${(address - parseInt(node.offset, 16)).toString(16)}\\n`\r\n        result += ` *   - Offset:  0x${node.offset}\\n`;\r\n        result += ` *   - Address: 0x${address.toString(16)}\\n`;\r\n        result += ` */\\n`;\r\n\r\n        for (let i = 1; i <= level; i++) {\r\n            result += `template <template<uintptr_t> class AddressPolicy${i}>\\n`;\r\n        }\r\n        result += `class ${enclosingName}::${className} : public ${baseClassName} {\\n`;\r\n        result += `public:\\n`;\r\n        result += `    typedef ${enclosingName} ParentType;\\n`;\r\n        result += `    typedef ${baseClassName} BaseType;\\n`;\r\n        result += `\\n`;\r\n        result += `    static const uintptr_t g_Offset = 0x${node.offset};\\n`;\r\n        result += `    static const uintptr_t g_Address = ParentType::g_Address + g_Offset;\\n`;\r\n        result += `    static const size_t    g_Size = ${node.size};\\n`;\r\n        result += `\\n`;\r\n        result += `    typedef typename BaseTypeOfBytes<g_Size>::value ValueType;\\n`;\r\n        result += `\\n`;\r\n        result += `    class Data;\\n`;\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        result += `    explicit ${className}(uintptr_t n)\\n`;\r\n        result += `        : BaseType(n)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    Data Get() const\\n`;\r\n        result += `    {\\n`;\r\n        result += `        return Data(\\n`;\r\n        result += `            *reinterpret_cast<volatile ValueType*>(this->GetAddress())\\n`;\r\n        result += `        );\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    void Set(ValueType value)\\n`;\r\n        result += `    {\\n`;\r\n        result += `        *reinterpret_cast<volatile ValueType*>(this->GetAddress()) = value;\\n`;\r\n        result += `    }\\n`;\r\n        result += `};\\n`;\r\n\r\n        result += `\\n`;\r\n        for (let i = 1; i <= level; i++) {\r\n            result += `template <template<uintptr_t> class AddressPolicy${i}>\\n`;\r\n        }\r\n        result += `class ${enclosingName}::${className}<AddressPolicy${level}>::Data : public DataBase<ValueType> {\\n`;\r\n        result += `private:\\n`;\r\n        result += `    ValueType m_Value;\\n`\r\n        result += `\\n`;\r\n        node.fields.forEach((field) => {\r\n            result += `    typedef Field<${field.bits[0]}, ${field.bits[1]}> M${siglofyName(field.name)};\\n`;\r\n        });\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        result += `    explicit Data(ValueType value)\\n`;\r\n        result += `        : m_Value(value)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    NN_IMPLICIT operator ValueType() const\\n`;\r\n        result += `    {\\n`;\r\n        result += `        return m_Value;\\n`;\r\n        result += `    }\\n`;\r\n        node.fields.forEach((field) => {\r\n            const fieldName = siglofyName(field.name);\r\n            result += `\\n`;\r\n            result += `    template <typename T = void>\\n`;\r\n            result += `    int ${fieldName}() const\\n`;\r\n            result += `    {\\n`;\r\n            result += `        return this->template Get<M${fieldName}>(m_Value);\\n`\r\n            result += `    }\\n`;\r\n            result += `\\n`;\r\n            result += `    template <typename T = void>\\n`;\r\n            result += `    Data& ${fieldName}(int value)\\n`;\r\n            result += `    {\\n`;\r\n            result += `        this->template Set<M${fieldName}>(m_Value, value);\\n`\r\n            result += `        return *this;\\n`;\r\n            result += `    }\\n`;\r\n        });\r\n        result += `};\\n`;\r\n    });\r\n\r\n    data['/'].children.forEach((child) => {\r\n        result += `\\n`;\r\n        result += `template <>\\n`;\r\n        result += `${rootClassName}::${getClasslName(child)}<Fixed> ${rootClassName}::${getFactoryName(child)}()\\n`;\r\n        result += `{\\n`;\r\n        result += `    return ${getClasslName(child)}<Fixed>(0);\\n`\r\n        result += `}\\n`;\r\n        result += `\\n`;\r\n        result += `template <>\\n`;\r\n        result += `${rootClassName}::${getClasslName(child)}<At> ${rootClassName}::${getFactoryName(child)}(uintptr_t address)\\n`;\r\n        result += `{\\n`;\r\n        result += `    return ${getClasslName(child)}<At>(address);\\n`\r\n        result += `}\\n`;\r\n        result += `\\n`;\r\n        result += `template <>\\n`;\r\n        result += `${rootClassName}::${getClasslName(child)}<Offset> ${rootClassName}::${getFactoryName(child)}(uintptr_t offset)\\n`;\r\n        result += `{\\n`;\r\n        result += `    return ${getClasslName(child)}<Offset>(offset);\\n`\r\n        result += `}\\n`;\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n// This generates the scheme described on confluence.\r\nlet convertToCpp = (data) => {\r\n    let result = '';\r\n    \r\n    // BOM\r\n    // result += '\\357\\273\\277';\r\n\r\n    // Copyright\r\n    result += \"/*--------------------------------------------------------------------------------*\\n\";\r\n    result += \"  Copyright (C)Nintendo All rights reserved.\\n\";\r\n    result += \"\\n\";\r\n    result += \"  These coded instructions, statements, and computer programs contain proprietary\\n\";\r\n    result += \"  information of Nintendo and/or its licensed developers and are protected by\\n\";\r\n    result += \"  national and international copyright laws. They may not be disclosed to third\\n\";\r\n    result += \"  parties or copied or duplicated in any form, in whole or in part, without the\\n\";\r\n    result += \"  prior written consent of Nintendo.\\n\";\r\n    result += \"\\n\";\r\n    result += \"  The content herein is highly confidential and should be handled accordingly.\\n\";\r\n    result += \" *--------------------------------------------------------------------------------*/\\n\";\r\n\r\n    result += \"\\n\";\r\n    result += \"/**\\n\";\r\n    result += \" * @file\\n\";\r\n    result += \" * @brief Automatically generated Register Accessors\\n\";\r\n    result += \" */\\n\";\r\n\r\n    // Nolint\r\n    result += \"\\n\";\r\n    result += \"// NOLINT(build/header_guard)\\n\";\r\n\r\n    let getFactoryName = (path) => {\r\n        return siglofyName(splitKey(path)[1]);\r\n\r\n    };\r\n\r\n    let getClasslName = (path) => {\r\n        const segs = path.split('/').filter(s => s !== '');\r\n        if (segs.length === 0) {\r\n            return 'Register';\r\n        } else {\r\n            return classifyName(segs[segs.length - 1]);\r\n        }\r\n    };\r\n\r\n    let getClasslNameLong = (path) => {\r\n        return ['Register'].concat(path.split('/').filter(s => s !== '').map((s) => classifyName(s))).join('::');\r\n    };\r\n\r\n    let hasSymbolicValue = (field) => (field.value && field.value.length > 0);\r\n\r\n    result += `\\n`;\r\n    result += `/**\\n`;\r\n    result += ` * @class At\\n`;\r\n    result += ` * @brief Address Policy Tag to apply an absolute runtime address\\n`;\r\n    result += ` *\\n`;\r\n    result += ` * @details\\n`;\r\n    result += ` *   This is an incomplete type intended to be used as dispatch tag for template\\n`;\r\n    result += ` *   methods. With this tag, the factory method to create a new instance of\\n`;\r\n    result += ` *   group or register will interpreate its sole argument as the absolute\\n`;\r\n    result += ` *   runtime address of such group or register.\\n`;\r\n    result += ` */\\n`;\r\n    result += `class At;\\n`;\r\n    \r\n    result += `\\n`;\r\n    result += `/**\\n`;\r\n    result += ` * @class Offset\\n`;\r\n    result += ` * @brief Address Policy Tag to apply an extra address offset\\n`;\r\n    result += ` *\\n`;\r\n    result += ` * @details\\n`;\r\n    result += ` *   This is an incomplete type intended to be used as dispatch tag for template\\n`;\r\n    result += ` *   methods. With this tag, the factory method to create a new instance of\\n`;\r\n    result += ` *   group or register will interpreate its sole argument as an address offset.\\n`;\r\n    result += ` *   The runtime address of such group or register is calculated by adding\\n`\r\n    result += ` *   together:\\n`;\r\n    result += ` *   -# runtime address of its parent\\n`;\r\n    result += ` *   -# declare offset of itself\\n`;\r\n    result += ` *   -# this extra offset\\n`;\r\n    result += ` */\\n`;\r\n    result += `class Offset;\\n`;\r\n    const rootClassName = 'Register';\r\n\r\n    //////////////////////////////////////////////////////////\r\n    // Declarations\r\n    //////////////////////////////////////////////////////////\r\n    \r\n    result += `\\n`;\r\n    result += `/**\\n`;\r\n    result += ` * @brief Top level class for the register accessors\\n`;\r\n    result += ` *\\n`;\r\n    result += ` * @details\\n`;\r\n    result += ` *   This class represents the top level container of all groups and registers.\\n`;\r\n    result += ` *   All of its data members and methods are static\\n`;\r\n    result += ` */\\n`;\r\n    result += `class ${rootClassName} {\\n`;\r\n    result += `public:\\n`;\r\n    result += `    /**\\n`;\r\n    result += `     * @brief Declare Address\\n`;\r\n    result += `     */\\n`;\r\n    result += `    static const uintptr_t g_DeclareAddress = 0;\\n`;\r\n    result += `    /**\\n`;\r\n    result += `     * @brief Runtime Address\\n`;\r\n    result += `     */\\n`;\r\n    result += `    static const uintptr_t g_RuntimeAddress = 0;\\n`;\r\n    result += `\\n`;\r\n    data['/'].children.forEach((path) => {\r\n        result += `    class ${getClasslName(path)};\\n`;\r\n    });\r\n    result += `\\n`;\r\n    result += `private:\\n`;\r\n    result += `    template <size_t N>\\n`;\r\n    result += `    struct  BaseTypeOfBytes_;\\n`;\r\n    result += `\\n`;\r\n    result += `    template <>\\n`;\r\n    result += `    struct BaseTypeOfBytes_<1> {\\n`;\r\n    result += `        typedef uint8_t value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    template <>\\n`;\r\n    result += `    struct BaseTypeOfBytes_<2> {\\n`;\r\n    result += `        typedef uint16_t value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    template <>\\n`;\r\n    result += `    struct BaseTypeOfBytes_<4> {\\n`;\r\n    result += `        typedef uint32_t value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    template <>\\n`;\r\n    result += `    struct BaseTypeOfBytes_<8> {\\n`;\r\n    result += `        typedef uint64_t value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    static constexpr size_t CeilP2Helper_(size_t n, size_t shift) {\\n`;\r\n    result += `        return (n & (n - 1)) ? CeilP2Helper_(n & (n - 1), 1) : (n << shift);\\n`;\r\n    result += `    }\\n`;\r\n    result += `\\n`;\r\n    result += `    static constexpr size_t CeilP2_(size_t n) {\\n`;\r\n    result += `        return n ? CeilP2Helper_(n, 0) : 0;\\n`;\r\n    result += `    }\\n`;\r\n    result += `\\n`;\r\n    result += `    template <size_t N>\\n`;\r\n    result += `    struct BaseTypeOfBits_ {\\n`;\r\n    result += `        typedef typename BaseTypeOfBytes_<CeilP2_((N + 7) / 8)>::value value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    template <uint8_t L, uint8_t H, typename T>\\n`\r\n\tresult += `    struct Field_ {\\n`\r\n    result += `        static const uint8_t low   = L;\\n`;\r\n    result += `        static const uint8_t high  = H;\\n`;\r\n    result += `\\n`;\r\n    result += `        NN_STATIC_ASSERT(low <= high);\\n`;\r\n    result += `        NN_STATIC_ASSERT(std::is_integral<T>::value);\\n`;\r\n    result += `        NN_STATIC_ASSERT(high < sizeof(T) * 8);\\n`;\r\n    result += `\\n`;\r\n    result += `        static const uint8_t shift = low;\\n`;\r\n    result += `        static const uint8_t size  = high - low + 1;\\n`;\r\n    result += `\\n`;\r\n    result += `        static const T mask = (size == sizeof(T) * 8) ? (~T{0}) : (((T{1} << size) - 1) << shift);\\n`;\r\n    result += `\\n`;\r\n    result += `        typedef typename BaseTypeOfBits_<size>::value ValueType;\\n`\r\n    result += `    };\\n`\r\n\r\n    result += `\\n`;\r\n    result += `public:\\n`;\r\n    data['/'].children.forEach((path) => {\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Factory method to create an instance of ${path}\\n`;\r\n        result += `     * @details\\n`;\r\n        result += `     *   The runtime address of the new instance is calculated by adding together:\\n`;\r\n        result += `     *   -# runtime address of its parent\\n`;\r\n        result += `     *   -# declare offset of itself\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static inline ${getClasslName(path)} ${getFactoryName(path)}() NN_NOEXCEPT;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Factory method to create an instance of ${path}\\n`;\r\n        result += `     * @details\\n`;\r\n        result += `     *   The runtime address of the new instance is determined by the template\\n`;\r\n        result += `     *   parameter, which can only be one of:\\n`;\r\n        result += `     *   - At\\n`;\r\n        result += `     *   - Offset\\n`;\r\n        result += `     */\\n`;\r\n        result += `    template <typename AddressPolicy>\\n`;\r\n        result += `    static inline ${getClasslName(path)} ${getFactoryName(path)}(uintptr_t) NN_NOEXCEPT;\\n`;\r\n        \r\n    });\r\n    result += `};\\n`;\r\n\r\n    forEachGroup(data, '/', (node, address, children) => {\r\n        if (!node.parent) {\r\n            return;\r\n        }\r\n\r\n        const className     = getClasslName(node.parent + node.name);\r\n        const enclosingName = getClasslNameLong(node.parent);\r\n        const offset = node.offset.match(/^0x/i) ? node.offset : `0x${node.offset}`;\r\n\r\n        result += `\\n`;\r\n        result += `/**\\n`;\r\n        result += ` * @brief Class for group ${node.parent  + node.name}\\n`;\r\n        result += ` *\\n`;\r\n        result += ` * @details\\n`;\r\n        result += ` *   This class represents the group ${node.parent  + node.name}.\\n`;\r\n        result += ` *   The declared address information are:\\n`;\r\n        result += ` *   - %Base:    0x${(address - parseInt(offset)).toString(16)}\\n`\r\n        result += ` *   - %Offset:  ${offset}\\n`;\r\n        result += ` *   - %Address: 0x${address.toString(16)}\\n`;\r\n        result += ` */\\n`;\r\n        result += `class ${enclosingName}::${className} {\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Base Address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareBase    = ${enclosingName}::g_DeclareAddress;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Address Offset\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareOffset  = ${offset};\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareAddress = g_DeclareBase + g_DeclareOffset;\\n`;\r\n        result += `\\n`;\r\n        children.forEach((path) => {\r\n            result += `    class ${getClasslName(path)};\\n`;\r\n        });\r\n        result += `\\n`;\r\n        result += `private:\\n`;\r\n        result += `    uintptr_t m_RuntimeAddress{g_DeclareAddress};\\n`;\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Constructor\\n`;\r\n        result += `     * @param[in] addr The runtime address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    explicit ${className}(uintptr_t addr) NN_NOEXCEPT\\n`;\r\n        result += `        : m_RuntimeAddress(addr)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    ${className}() NN_NOEXCEPT = default;\\n`;\r\n        \r\n        children.forEach((path) => {\r\n            result += `\\n`;\r\n            result += `    /**\\n`;\r\n            result += `     * @brief Factory method to create an instance of ${path}\\n`;\r\n            result += `     * @details\\n`;\r\n            result += `     *   The runtime address of the new instance is calculated by adding together:\\n`;\r\n            result += `     *   -# runtime address of its parent\\n`;\r\n            result += `     *   -# declare offset of itself\\n`;\r\n            result += `     */\\n`;\r\n            result += `    inline ${getClasslName(path)} ${getFactoryName(path)}() const NN_NOEXCEPT;\\n`;\r\n            result += `\\n`;\r\n            result += `    /**\\n`;\r\n            result += `     * @brief Factory method to create an instance of ${path}\\n`;\r\n            result += `     * @details\\n`;\r\n            result += `     *   The runtime address of the new instance is determined by the template\\n`;\r\n            result += `     *   parameter, which can only be one of:\\n`;\r\n            result += `     *   - At\\n`;\r\n            result += `     *   - Offset\\n`;\r\n            result += `     */\\n`;\r\n            result += `    template <typename AddressPolicy>\\n`;\r\n            result += `    inline ${getClasslName(path)} ${getFactoryName(path)}(uintptr_t n) const NN_NOEXCEPT;\\n`;\r\n        });\r\n        \r\n        result += `};\\n`;\r\n    });\r\n\r\n    forEachRegister(data, '/', (node, address) => {\r\n        const className     = getClasslName(node.parent + node.name);\r\n        const enclosingName = getClasslNameLong(node.parent);\r\n        const offset = node.offset.match(/^0x/i) ? node.offset : `0x${node.offset}`;\r\n\r\n        result += `\\n`;\r\n        result += `/**\\n`;\r\n        result += ` * @brief Class for register ${node.parent  + node.name}\\n`;\r\n        result += ` *\\n`;\r\n        result += ` * @details\\n`;\r\n        result += ` *   This class represents the ${node.desc_short}, i.e. ${node.parent  + node.name}.\\n`;\r\n        result += ` *\\n`;\r\n        result += ` *   The declared address information are:\\n`;\r\n        result += ` *   - %Base:    0x${(address - parseInt(offset)).toString(16)}\\n`\r\n        result += ` *   - %Offset:  ${offset}\\n`;\r\n        result += ` *   - %Address: 0x${address.toString(16)}\\n`;\r\n        result += ` */\\n`;\r\n        result += `class ${enclosingName}::${className} {\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Base Address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareBase    = ${enclosingName}::g_DeclareAddress;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Address Offset\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareOffset  = ${offset};\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareAddress = g_DeclareBase + g_DeclareOffset;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Size of this register in bytes\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const size_t    g_Size           = ${node.size};\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Smallest integer type that can hold the value of this register\\n`;\r\n        result += `     */\\n`;\r\n        result += `    typedef typename BaseTypeOfBytes_<g_Size>::value ValueType_;\\n`;\r\n        result += `\\n`;\r\n        result += `private:\\n`;\r\n        result += `    uintptr_t m_RuntimeAddress{g_DeclareAddress};\\n`;\r\n        result += `    class     Data_;\\n`;\r\n        result += `\\n`;\r\n        node.fields.forEach((field) => {\r\n            result += `    typedef Field_<${field.bits[0]}, ${field.bits[1]}, ValueType_> ${classifyName(field.name)}_;\\n`;\r\n        });\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        node.fields.forEach((field) => {\r\n            if (hasSymbolicValue(field)) {\r\n                result += `    /**\\n`;\r\n                result += `     * @brief Symbolic values for the field ${field.name}\\n`;\r\n                result += `     */\\n`;\r\n                result += `    enum class ${siglofyName(field.name)}Value : ${classifyName(field.name)}_::ValueType {\\n`;\r\n                field.value.forEach(symbolic => {\r\n                    result += `        ${siglofyName(symbolic.name)} = ${symbolic.value}, //!< ${symbolic.name}\\n`;\r\n                });\r\n                result += `    };\\n`;\r\n            }\r\n        });\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Constructor\\n`;\r\n        result += `     * @param[in] addr The runtime address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    explicit ${className}(uintptr_t addr) NN_NOEXCEPT\\n`;\r\n        result += `        : m_RuntimeAddress(addr)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    ${className}() NN_NOEXCEPT = default;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Read register value to memory\\n`;\r\n        result += `     */\\n`;\r\n        result += `    inline Data_ Get() const NN_NOEXCEPT;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Write a value from memory to register\\n`;\r\n        result += `     * @param[in] value The value to be written\\n`;\r\n        result += `     */\\n`;\r\n        result += `    inline void  Set(ValueType_ value) NN_NOEXCEPT;\\n`;\r\n        result += `};\\n`;\r\n\r\n        result += `\\n`;\r\n        result += `/**\\n`;\r\n        result += ` * @brief In memory value type for register ${node.parent  + node.name}\\n`;\r\n        result += ` * @details\\n`;\r\n        result += ` *   This class is the in memory reprensentation of the register value.\\n`;\r\n        result += ` *   It provides accessors to read / write the fields of the register. Those\\n`;\r\n        result += ` *   accessors affect only the in memory copy of the register value.\\n`;\r\n        result += ` *   value.\\n`;\r\n        result += ` */\\n`;\r\n        result += `class ${enclosingName}::${className}::Data_ {\\n`;\r\n        result += `private:\\n`;\r\n        result += `    ValueType_ m_Value;\\n`\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Constructor\\n`;\r\n        result += `     * @param[in] value The register reading\\n`;\r\n        result += `     */\\n`;\r\n        result += `    explicit Data_(ValueType_ value) NN_NOEXCEPT\\n`;\r\n        result += `        : m_Value(value)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Implicitly convert back to ValueType_\\n`;\r\n        result += `     */\\n`;\r\n        result += `    NN_IMPLICIT operator ValueType_() const NN_NOEXCEPT\\n`;\r\n        result += `    {\\n`;\r\n        result += `        return m_Value;\\n`;\r\n        result += `    }\\n`;\r\n        node.fields.forEach((field) => {\r\n            const fieldName = siglofyName(field.name);\r\n            const valueType = hasSymbolicValue(field) ? `${siglofyName(field.name)}Value` : `${classifyName(field.name)}_::ValueType`;\r\n            result += `\\n`;\r\n            result += `    /**\\n`;\r\n            result += `     * @brief Read the ${field.name} field\\n`;\r\n            result += `     */\\n`;\r\n            result += `    inline ${valueType} ${fieldName}() const NN_NOEXCEPT;\\n`;\r\n            result += `\\n`;\r\n            result += `    /**\\n`;\r\n            result += `     * @brief Write the ${field.name} field\\n`;\r\n            result += `     */\\n`;\r\n            result += `    inline Data_& ${fieldName}(${valueType} value) NN_NOEXCEPT;\\n`\r\n        });\r\n        result += `};\\n`;\r\n    });\r\n\r\n    //////////////////////////////////////////////////////////\r\n    // Implementation\r\n    //////////////////////////////////////////////////////////\r\n\r\n    forEachGroup(data, '/', (node, address, children) => {\r\n        const runtimeAddress = node.parent ? 'm_RuntimeAddress' : 'g_RuntimeAddress';\r\n        const constNess      = node.parent ? 'const' : '';\r\n        const enclosingName  = getClasslNameLong((node.parent || '') + node.name);\r\n\r\n        children.forEach((path) => {\r\n            const className     = getClasslName(path);\r\n            const classNameLong = getClasslNameLong(path);\r\n            const factoryName   = getFactoryName(path);\r\n\r\n            result += `\\n`;\r\n            result += `/*\\n`;\r\n            result += ` * ${path}: Factory methods\\n`;\r\n            result += ` */\\n`;\r\n            result += `\\n`;\r\n            result += `inline ${classNameLong}\\n`\r\n            result += `${enclosingName}::${factoryName}() ${constNess} NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    return ${className}(${runtimeAddress} + ${className}::g_DeclareOffset);\\n`\r\n            result += `}\\n`;\r\n            result += `\\n`;\r\n            result += `template <>\\n`;\r\n            result += `inline ${classNameLong}\\n`\r\n            result += `${enclosingName}::${factoryName}<At>(uintptr_t address) ${constNess} NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    return ${className}(address);\\n`\r\n            result += `}\\n`;\r\n            result += `\\n`;\r\n            result += `template <>\\n`;\r\n            result += `inline ${classNameLong}\\n`\r\n            result += `${enclosingName}::${factoryName}<Offset>(uintptr_t offset) ${constNess} NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    return ${className}(${runtimeAddress} + ${className}::g_DeclareOffset + offset);\\n`\r\n            result += `}\\n`;\r\n        });\r\n    });\r\n\r\n    forEachRegister(data, '/', (node, address) => {\r\n        const enclosingName  = getClasslNameLong(node.parent + node.name);\r\n        \r\n        result += `/*\\n`;\r\n        result += ` * ${node.parent + node.name}: Getter\\n`;\r\n        result += ` */\\n`;\r\n        result += `inline ${enclosingName}::Data_\\n`;\r\n        result += `${enclosingName}::Get() const NN_NOEXCEPT\\n`;\r\n        result += `{\\n`;\r\n        result += `    return Data_(*(volatile ValueType_*)m_RuntimeAddress);\\n`\r\n        result += `}\\n`;\r\n        \r\n        result += `\\n`;\r\n        result += `/*\\n`;\r\n        result += ` * ${node.parent + node.name}: Setter\\n`;\r\n        result += ` */\\n`;\r\n        result += `inline void\\n`;\r\n        result += `${enclosingName}::Set(ValueType_ value) NN_NOEXCEPT\\n`;\r\n        result += `{\\n`;\r\n        result += `    *(volatile ValueType_*)m_RuntimeAddress = value;\\n`\r\n        result += `}\\n`;\r\n\r\n        node.fields.forEach((field) => {\r\n            const methodName = siglofyName(field.name);\r\n            const className  = `${classifyName(field.name)}_`;\r\n            const valueType = hasSymbolicValue(field) ? `${siglofyName(field.name)}Value` : `${className}::ValueType`;\r\n\r\n            result += `\\n`;\r\n            result += `/*\\n`;\r\n            result += ` * ${node.parent + node.name}: Field accessor\\n`;\r\n            result += ` *   [${field.bits[0]}, ${field.bits[1]}]: ${field.name} - ${field.meaning}\\n`;\r\n            result += ` */\\n`;\r\n            result += `\\n`;\r\n            result += `inline ${enclosingName}::${valueType}\\n`;\r\n            result += `${enclosingName}::Data_::${methodName}() const NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    ${className}::ValueType rv = (m_Value & ${className}::mask) >> ${className}::shift;\\n`;\r\n            result += `    return ` + (hasSymbolicValue(field) ? `static_cast<${valueType}>(rv)`: `rv`) + `;\\n`;\r\n            result += `}\\n`;\r\n            result += `\\n`;\r\n            result += `inline ${enclosingName}::Data_&\\n`;\r\n            result += `${enclosingName}::Data_::${methodName}(${valueType} value) NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    m_Value &= ~${className}::mask;\\n`;\r\n            result += `    m_Value |= (static_cast<ValueType_>(value) << ${className}::shift) & ${className}::mask;\\n`\r\n            result += `    return *this;\\n`;\r\n            result += `}\\n`;\r\n        });\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\n// Callback based register access\r\nlet convertToCppIndirectAccess = (data) => {\r\n    let result = '';\r\n    \r\n    // BOM\r\n    // result += '\\357\\273\\277';\r\n\r\n    // Copyright\r\n    result += \"/*--------------------------------------------------------------------------------*\\n\";\r\n    result += \"  Copyright (C)Nintendo All rights reserved.\\n\";\r\n    result += \"\\n\";\r\n    result += \"  These coded instructions, statements, and computer programs contain proprietary\\n\";\r\n    result += \"  information of Nintendo and/or its licensed developers and are protected by\\n\";\r\n    result += \"  national and international copyright laws. They may not be disclosed to third\\n\";\r\n    result += \"  parties or copied or duplicated in any form, in whole or in part, without the\\n\";\r\n    result += \"  prior written consent of Nintendo.\\n\";\r\n    result += \"\\n\";\r\n    result += \"  The content herein is highly confidential and should be handled accordingly.\\n\";\r\n    result += \" *--------------------------------------------------------------------------------*/\\n\";\r\n\r\n    result += \"\\n\";\r\n    result += \"/**\\n\";\r\n    result += \" * @file\\n\";\r\n    result += \" * @brief Automatically generated Register Accessors\\n\";\r\n    result += \" */\\n\";\r\n\r\n    // Nolint\r\n    result += \"\\n\";\r\n    result += \"// NOLINT(build/header_guard)\\n\";\r\n\r\n    let getFactoryName = (path) => {\r\n        return siglofyName(splitKey(path)[1]);\r\n\r\n    };\r\n\r\n    let getClasslName = (path) => {\r\n        const segs = path.split('/').filter(s => s !== '');\r\n        if (segs.length === 0) {\r\n            return 'Register';\r\n        } else {\r\n            return classifyName(segs[segs.length - 1]);\r\n        }\r\n    };\r\n\r\n    let getClasslNameLong = (path) => {\r\n        return ['Register'].concat(path.split('/').filter(s => s !== '').map((s) => classifyName(s))).join('::');\r\n    };\r\n\r\n    let hasSymbolicValue = (field) => (field.value && field.value.length > 0);\r\n\r\n    result += `\\n`;\r\n    result += `/**\\n`;\r\n    result += ` * @class At\\n`;\r\n    result += ` * @brief Address Policy Tag to apply an absolute runtime address\\n`;\r\n    result += ` *\\n`;\r\n    result += ` * @details\\n`;\r\n    result += ` *   This is an incomplete type intended to be used as dispatch tag for template\\n`;\r\n    result += ` *   methods. With this tag, the factory method to create a new instance of\\n`;\r\n    result += ` *   group or register will interpreate its sole argument as the absolute\\n`;\r\n    result += ` *   runtime address of such group or register.\\n`;\r\n    result += ` */\\n`;\r\n    result += `class At;\\n`;\r\n    \r\n    result += `\\n`;\r\n    result += `/**\\n`;\r\n    result += ` * @class Offset\\n`;\r\n    result += ` * @brief Address Policy Tag to apply an extra address offset\\n`;\r\n    result += ` *\\n`;\r\n    result += ` * @details\\n`;\r\n    result += ` *   This is an incomplete type intended to be used as dispatch tag for template\\n`;\r\n    result += ` *   methods. With this tag, the factory method to create a new instance of\\n`;\r\n    result += ` *   group or register will interpreate its sole argument as an address offset.\\n`;\r\n    result += ` *   The runtime address of such group or register is calculated by adding\\n`\r\n    result += ` *   together:\\n`;\r\n    result += ` *   -# runtime address of its parent\\n`;\r\n    result += ` *   -# declare offset of itself\\n`;\r\n    result += ` *   -# this extra offset\\n`;\r\n    result += ` */\\n`;\r\n    result += `class Offset;\\n`;\r\n    const rootClassName = 'Register';\r\n\r\n    result += `\\n`;\r\n    result += `/**\\n`;\r\n    result += ` * @brief Type definitions for std::function based read and write callbacks.\\n`;\r\n    result += ` *\\n`;\r\n    result += ` */\\n`;\r\n    result += `typedef std::function<void(void* pOutData, size_t dataSize, size_t registerOffset)> ReadHandlerType;\\n`;\r\n    result += `typedef std::function<void(const void* pInData, size_t dataSize, size_t registerOffset)>  WriteHandlerType;\\n`;\r\n\r\n\r\n    //////////////////////////////////////////////////////////\r\n    // Declarations\r\n    //////////////////////////////////////////////////////////\r\n    \r\n    result += `\\n`;\r\n    result += `/**\\n`;\r\n    result += ` * @brief Top level class for the register accessors\\n`;\r\n    result += ` *\\n`;\r\n    result += ` * @details\\n`;\r\n    result += ` *   This class represents the top level container of all groups and registers.\\n`;\r\n    result += ` *   All of its data members and methods are static\\n`;\r\n    result += ` */\\n`;\r\n    result += `class ${rootClassName} {\\n`;\r\n    result += `public:\\n`;\r\n    result += `    /**\\n`;\r\n    result += `     * @brief Declare Address\\n`;\r\n    result += `     */\\n`;\r\n    result += `    static const uintptr_t g_DeclareAddress = 0;\\n`;\r\n    result += `    /**\\n`;\r\n    result += `     * @brief Runtime Address\\n`;\r\n    result += `     */\\n`;\r\n    result += `    static const uintptr_t g_RuntimeAddress = 0;\\n`;\r\n    result += `\\n`;\r\n    data['/'].children.forEach((path) => {\r\n        result += `    class ${getClasslName(path)};\\n`;\r\n    });\r\n    result += `\\n`;\r\n    result += `private:\\n`;\r\n    result += `    template <size_t N>\\n`;\r\n    result += `    struct  BaseTypeOfBytes_;\\n`;\r\n    result += `\\n`;\r\n    result += `    template <>\\n`;\r\n    result += `    struct BaseTypeOfBytes_<1> {\\n`;\r\n    result += `        typedef uint8_t value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    template <>\\n`;\r\n    result += `    struct BaseTypeOfBytes_<2> {\\n`;\r\n    result += `        typedef uint16_t value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    template <>\\n`;\r\n    result += `    struct BaseTypeOfBytes_<4> {\\n`;\r\n    result += `        typedef uint32_t value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    template <>\\n`;\r\n    result += `    struct BaseTypeOfBytes_<8> {\\n`;\r\n    result += `        typedef uint64_t value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    static constexpr size_t CeilP2Helper_(size_t n, size_t shift) {\\n`;\r\n    result += `        return (n & (n - 1)) ? CeilP2Helper_(n & (n - 1), 1) : (n << shift);\\n`;\r\n    result += `    }\\n`;\r\n    result += `\\n`;\r\n    result += `    static constexpr size_t CeilP2_(size_t n) {\\n`;\r\n    result += `        return n ? CeilP2Helper_(n, 0) : 0;\\n`;\r\n    result += `    }\\n`;\r\n    result += `\\n`;\r\n    result += `    template <size_t N>\\n`;\r\n    result += `    struct BaseTypeOfBits_ {\\n`;\r\n    result += `        typedef typename BaseTypeOfBytes_<CeilP2_((N + 7) / 8)>::value value;\\n`;\r\n    result += `    };\\n`;\r\n    result += `\\n`;\r\n    result += `    template <uint8_t L, uint8_t H, typename T>\\n`\r\n    result += `    struct Field_ {\\n`\r\n    result += `        static const uint8_t low   = L;\\n`;\r\n    result += `        static const uint8_t high  = H;\\n`;\r\n    result += `\\n`;\r\n    result += `        NN_STATIC_ASSERT(low <= high);\\n`;\r\n    result += `        NN_STATIC_ASSERT(std::is_integral<T>::value);\\n`;\r\n    result += `        NN_STATIC_ASSERT(high < sizeof(T) * 8);\\n`;\r\n    result += `\\n`;\r\n    result += `        static const uint8_t shift = low;\\n`;\r\n    result += `        static const uint8_t size  = high - low + 1;\\n`;\r\n    result += `\\n`;\r\n    result += `        static const T mask = (size == sizeof(T) * 8) ? (~T{0}) : (((T{1} << size) - 1) << shift);\\n`;\r\n    result += `\\n`;\r\n    result += `        typedef typename BaseTypeOfBits_<size>::value ValueType;\\n`\r\n    result += `    };\\n`\r\n\r\n    result += `\\n`;\r\n    result += `};\\n`;\r\n\r\n    forEachGroup(data, '/', (node, address, children) => {\r\n        if (!node.parent) {\r\n            return;\r\n        }\r\n\r\n        const className     = getClasslName(node.parent + node.name);\r\n        const enclosingName = getClasslNameLong(node.parent);\r\n        const offset = node.offset.match(/^0x/i) ? node.offset : `0x${node.offset}`;\r\n\r\n        result += `\\n`;\r\n        result += `/**\\n`;\r\n        result += ` * @brief Class for group ${node.parent  + node.name}\\n`;\r\n        result += ` *\\n`;\r\n        result += ` * @details\\n`;\r\n        result += ` *   This class represents the group ${node.parent  + node.name}.\\n`;\r\n        result += ` *   The declared address information are:\\n`;\r\n        result += ` *   - %Base:    0x${(address - parseInt(offset)).toString(16)}\\n`\r\n        result += ` *   - %Offset:  ${offset}\\n`;\r\n        result += ` *   - %Address: 0x${address.toString(16)}\\n`;\r\n        result += ` */\\n`;\r\n        result += `class ${enclosingName}::${className} {\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Base Address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareBase    = ${enclosingName}::g_DeclareAddress;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Address Offset\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareOffset  = ${offset};\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareAddress = g_DeclareBase + g_DeclareOffset;\\n`;\r\n        result += `\\n`;\r\n        children.forEach((path) => {\r\n            result += `    class ${getClasslName(path)};\\n`;\r\n        });\r\n        result += `\\n`;\r\n        result += `private:\\n`;\r\n        result += `    uintptr_t m_RuntimeAddress{g_DeclareAddress};\\n`;\r\n        result += `    ReadHandlerType  m_ReadHandler;\\n`;\r\n        result += `    WriteHandlerType m_WriteHandler;\\n`;\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Constructor\\n`;\r\n        result += `     * @param[in] readHandler  Callback invoked when register is read\\n`;\r\n        result += `     * @param[in] writeHandler Callback invoked when register is written\\n`;\r\n        result += `     */\\n`;\r\n        result += `    ${className}( const ReadHandlerType& readHandler,  const WriteHandlerType& writeHandler) NN_NOEXCEPT\\n`;\r\n        result += `        : m_ReadHandler(readHandler)\\n`;\r\n        result += `        , m_WriteHandler(writeHandler)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        \r\n        children.forEach((path) => {\r\n            result += `\\n`;\r\n            result += `    /**\\n`;\r\n            result += `     * @brief Factory method to create an instance of ${path}\\n`;\r\n            result += `     * @details\\n`;\r\n            result += `     *   The runtime address of the new instance is calculated by adding together:\\n`;\r\n            result += `     *   -# runtime address of its parent\\n`;\r\n            result += `     *   -# declare offset of itself\\n`;\r\n            result += `     */\\n`;\r\n            result += `    inline ${getClasslName(path)} ${getFactoryName(path)}() const NN_NOEXCEPT;\\n`;\r\n            result += `\\n`;\r\n            result += `    /**\\n`;\r\n            result += `     * @brief Factory method to create an instance of ${path}\\n`;\r\n            result += `     * @details\\n`;\r\n            result += `     *   The runtime address of the new instance is determined by the template\\n`;\r\n            result += `     *   parameter, which can only be one of:\\n`;\r\n            result += `     *   - At\\n`;\r\n            result += `     *   - Offset\\n`;\r\n            result += `     */\\n`;\r\n            result += `    template <typename AddressPolicy>\\n`;\r\n            result += `    inline ${getClasslName(path)} ${getFactoryName(path)}(uintptr_t n) const NN_NOEXCEPT;\\n`;\r\n        });\r\n        result += `\\n`;\r\n        result += `    inline void Read(void* pOutData, size_t dataSize, size_t registerOffset) const\\n`;\r\n        result += `    {\\n`;\r\n        result += `        m_ReadHandler(pOutData, dataSize, registerOffset);\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    inline void Write(const void* pInData, size_t dataSize, size_t registerOffset) const\\n`;\r\n        result += `    {\\n`;\r\n        result += `        m_WriteHandler(pInData, dataSize, registerOffset);\\n`;\r\n        result += `    }\\n`;\r\n        result += `};\\n`;\r\n    });\r\n\r\n    forEachRegister(data, '/', (node, address) => {\r\n        const className     = getClasslName(node.parent + node.name);\r\n        const enclosingName = getClasslNameLong(node.parent);\r\n        const offset = node.offset.match(/^0x/i) ? node.offset : `0x${node.offset}`;\r\n\r\n        result += `\\n`;\r\n        result += `/**\\n`;\r\n        result += ` * @brief Class for register ${node.parent  + node.name}\\n`;\r\n        result += ` *\\n`;\r\n        result += ` * @details\\n`;\r\n        result += ` *   This class represents the ${node.desc_short}, i.e. ${node.parent  + node.name}.\\n`;\r\n        result += ` *\\n`;\r\n        result += ` *   The declared address information are:\\n`;\r\n        result += ` *   - %Base:    0x${(address - parseInt(offset)).toString(16)}\\n`\r\n        result += ` *   - %Offset:  ${offset}\\n`;\r\n        result += ` *   - %Address: 0x${address.toString(16)}\\n`;\r\n        result += ` */\\n`;\r\n        result += `class ${enclosingName}::${className} {\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Base Address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareBase    = ${enclosingName}::g_DeclareAddress;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Address Offset\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareOffset  = ${offset};\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Declared Address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const uintptr_t g_DeclareAddress = g_DeclareBase + g_DeclareOffset;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Size of this register in bytes\\n`;\r\n        result += `     */\\n`;\r\n        result += `    static const size_t    g_Size           = ${node.size};\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Smallest integer type that can hold the value of this register\\n`;\r\n        result += `     */\\n`;\r\n        result += `    typedef typename BaseTypeOfBytes_<g_Size>::value ValueType_;\\n`;\r\n        result += `\\n`;\r\n        result += `private:\\n`;\r\n        result += `    const ${enclosingName}& m_Factory;\\n`;\r\n        result += `    uintptr_t m_RuntimeAddress{g_DeclareAddress};\\n`;\r\n        result += `    class     Data_;\\n`;\r\n        result += `\\n`;\r\n        node.fields.forEach((field) => {\r\n            result += `    typedef Field_<${field.bits[0]}, ${field.bits[1]}, ValueType_> ${classifyName(field.name)}_;\\n`;\r\n        });\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        node.fields.forEach((field) => {\r\n            if (hasSymbolicValue(field)) {\r\n                result += `    /**\\n`;\r\n                result += `     * @brief Symbolic values for the field ${field.name}\\n`;\r\n                result += `     */\\n`;\r\n                result += `    enum class ${siglofyName(field.name)}Value : ${classifyName(field.name)}_::ValueType {\\n`;\r\n                field.value.forEach(symbolic => {\r\n                    result += `        ${siglofyName(symbolic.name)} = ${symbolic.value}, //!< ${symbolic.name}\\n`;\r\n                });\r\n                result += `    };\\n`;\r\n            }\r\n        });\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Constructor\\n`;\r\n        result += `     * @param[factory] reference to the factory\\n`;\r\n        result += `     * @param[in] addr The runtime address\\n`;\r\n        result += `     */\\n`;\r\n        result += `    ${className}(const ${enclosingName}& factory, uintptr_t addr) NN_NOEXCEPT\\n`;\r\n        result += `        : m_Factory(factory)\\n`;\r\n        result += `        , m_RuntimeAddress(addr)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Constructor\\n`;\r\n        result += `     * @param[factory] reference to the factory\\n`;\r\n        result += `     */\\n`;\r\n        result += `    explicit ${className}(const ${enclosingName}& factory) NN_NOEXCEPT\\n`;\r\n        result += `        : m_Factory(factory)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Read register value to memory\\n`;\r\n        result += `     */\\n`;\r\n        result += `    inline Data_ Read() const NN_NOEXCEPT;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Write a value from memory to register\\n`;\r\n        result += `     * @param[in] value The value to be written\\n`;\r\n        result += `     */\\n`;\r\n        result += `    inline void  Write(ValueType_ value) NN_NOEXCEPT;\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Create a register data object; don't touch hardware.\\n`;\r\n        result += `     */\\n`;\r\n        result += `    inline Data_ MakeDataValue(ValueType_ value) NN_NOEXCEPT;\\n`;\r\n        result += `};\\n`;\r\n        result += `\\n`;\r\n        result += `/**\\n`;\r\n        result += ` * @brief In memory value type for register ${node.parent  + node.name}\\n`;\r\n        result += ` * @details\\n`;\r\n        result += ` *   This class is the in memory reprensentation of the register value.\\n`;\r\n        result += ` *   It provides accessors to read / write the fields of the register. Those\\n`;\r\n        result += ` *   accessors affect only the in memory copy of the register value.\\n`;\r\n        result += ` *   value.\\n`;\r\n        result += ` */\\n`;\r\n        result += `class ${enclosingName}::${className}::Data_ {\\n`;\r\n        result += `private:\\n`;\r\n        result += `    ValueType_ m_Value;\\n`\r\n        result += `\\n`;\r\n        result += `public:\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Constructor\\n`;\r\n        result += `     * @param[in] value The register reading\\n`;\r\n        result += `     */\\n`;\r\n        result += `    explicit Data_(ValueType_ value) NN_NOEXCEPT\\n`;\r\n        result += `        : m_Value(value)\\n`;\r\n        result += `    {\\n`;\r\n        result += `    }\\n`;\r\n        result += `\\n`;\r\n        result += `    /**\\n`;\r\n        result += `     * @brief Implicitly convert back to ValueType_\\n`;\r\n        result += `     */\\n`;\r\n        result += `    NN_IMPLICIT operator ValueType_() const NN_NOEXCEPT\\n`;\r\n        result += `    {\\n`;\r\n        result += `        return m_Value;\\n`;\r\n        result += `    }\\n`;\r\n        node.fields.forEach((field) => {\r\n            const fieldName = siglofyName(field.name);\r\n            const valueType = hasSymbolicValue(field) ? `${siglofyName(field.name)}Value` : `${classifyName(field.name)}_::ValueType`;\r\n            result += `\\n`;\r\n            result += `    /**\\n`;\r\n            result += `     * @brief Read the ${field.name} field\\n`;\r\n            result += `     */\\n`;\r\n            result += `    inline ${valueType} ${fieldName}() const NN_NOEXCEPT;\\n`;\r\n            result += `\\n`;\r\n            result += `    /**\\n`;\r\n            result += `     * @brief Write the ${field.name} field\\n`;\r\n            result += `     */\\n`;\r\n            result += `    inline Data_& ${fieldName}(${valueType} value) NN_NOEXCEPT;\\n`\r\n        });\r\n        result += `};\\n`;\r\n    });\r\n\r\n    //////////////////////////////////////////////////////////\r\n    // Implementation\r\n    //////////////////////////////////////////////////////////\r\n\r\n    forEachGroup(data, '/', (node, address, children) => {\r\n        const runtimeAddress = node.parent ? 'm_RuntimeAddress' : 'g_RuntimeAddress';\r\n        const constNess      = node.parent ? 'const' : '';\r\n        const passThis       = node.parent ? '*this,' : '';\r\n        const enclosingName  = getClasslNameLong((node.parent || '') + node.name);\r\n\r\n        // no factory methods for top level container\r\n        if(!node.parent)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        children.forEach((path) => {\r\n            const className     = getClasslName(path);\r\n            const classNameLong = getClasslNameLong(path);\r\n            const factoryName   = getFactoryName(path);\r\n\r\n            result += `\\n`;\r\n            result += `/*\\n`;\r\n            result += ` * ${path}: Factory methods\\n`;\r\n            result += ` */\\n`;\r\n            result += `\\n`;\r\n            result += `inline ${classNameLong}\\n`\r\n            result += `${enclosingName}::${factoryName}() ${constNess} NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    return ${className}(${passThis} ${runtimeAddress} + ${className}::g_DeclareOffset);\\n`\r\n            result += `}\\n`;\r\n            result += `\\n`;\r\n            result += `template <>\\n`;\r\n            result += `inline ${classNameLong}\\n`\r\n            result += `${enclosingName}::${factoryName}<At>(uintptr_t address) ${constNess} NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    return ${className}(${passThis} address);\\n`\r\n            result += `}\\n`;\r\n            result += `\\n`;\r\n            result += `template <>\\n`;\r\n            result += `inline ${classNameLong}\\n`\r\n            result += `${enclosingName}::${factoryName}<Offset>(uintptr_t offset) ${constNess} NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    return ${className}(${passThis} ${runtimeAddress} + ${className}::g_DeclareOffset + offset);\\n`\r\n            result += `}\\n`;\r\n        });\r\n    });\r\n\r\n    forEachRegister(data, '/', (node, address) => {\r\n        const enclosingName  = getClasslNameLong(node.parent + node.name);\r\n        \r\n        result += `/*\\n`;\r\n        result += ` * ${node.parent + node.name}: Hardware reader\\n`;\r\n        result += ` */\\n`;\r\n        result += `inline ${enclosingName}::Data_\\n`;\r\n        result += `${enclosingName}::Read() const NN_NOEXCEPT\\n`;\r\n        result += `{\\n`;\r\n        result += `    Data_ data(0);\\n`\r\n        result += `    m_Factory.Read(&data, g_Size, m_RuntimeAddress);\\n`\r\n        result += `    return data;\\n`\r\n        result += `}\\n`;\r\n        \r\n        result += `\\n`;\r\n        result += `/*\\n`;\r\n        result += ` * ${node.parent + node.name}: Hardware writer\\n`;\r\n        result += ` */\\n`;\r\n        result += `inline void\\n`;\r\n        result += `${enclosingName}::Write(const ValueType_ value) NN_NOEXCEPT\\n`;\r\n        result += `{\\n`;\r\n        result += `    m_Factory.Write(&value, g_Size, m_RuntimeAddress);\\n`\r\n        result += `}\\n`;\r\n\r\n        result += `\\n`;\r\n        result += `/*\\n`;\r\n        result += ` * ${node.parent + node.name}: Create a zeroed data value\\n`;\r\n        result += ` */\\n`;\r\n        result += `inline ${enclosingName}::Data_\\n`;\r\n        result += `${enclosingName}::MakeDataValue(ValueType_ value = 0) NN_NOEXCEPT\\n`;\r\n        result += `{\\n`;\r\n        result += `    return Data_(value);\\n`\r\n        result += `}\\n`;\r\n\r\n        node.fields.forEach((field) => {\r\n            const methodName = siglofyName(field.name);\r\n            const className  = `${classifyName(field.name)}_`;\r\n            const valueType = hasSymbolicValue(field) ? `${siglofyName(field.name)}Value` : `${className}::ValueType`;\r\n\r\n            result += `\\n`;\r\n            result += `/*\\n`;\r\n            result += ` * ${node.parent + node.name}: Field accessor\\n`;\r\n            result += ` *   [${field.bits[0]}, ${field.bits[1]}]: ${field.name} - ${field.meaning}\\n`;\r\n            result += ` */\\n`;\r\n            result += `\\n`;\r\n            result += `inline ${enclosingName}::${valueType}\\n`;\r\n            result += `${enclosingName}::Data_::${methodName}() const NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    ${className}::ValueType rv = (m_Value & ${className}::mask) >> ${className}::shift;\\n`;\r\n            result += `    return ` + (hasSymbolicValue(field) ? `static_cast<${valueType}>(rv)`: `rv`) + `;\\n`;\r\n            result += `}\\n`;\r\n            result += `\\n`;\r\n            result += `inline ${enclosingName}::Data_&\\n`;\r\n            result += `${enclosingName}::Data_::${methodName}(${valueType} value) NN_NOEXCEPT\\n`;\r\n            result += `{\\n`;\r\n            result += `    m_Value &= ~${className}::mask;\\n`;\r\n            result += `    m_Value |= (static_cast<ValueType_>(value) << ${className}::shift) & ${className}::mask;\\n`\r\n            result += `    return *this;\\n`;\r\n            result += `}\\n`;\r\n        });\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nconst Converter = [\r\n    {\r\n        handle: convertToJson,\r\n        description: 'JSON',\r\n        extension: '.json',\r\n    },\r\n    {\r\n        handle: convertToCpp,\r\n        description: 'C++',\r\n        extension: '.h',\r\n    },\r\n    {\r\n        handle: convertToMacro,\r\n        description: 'C/C++ Macro',\r\n        extension: '.h',\r\n    },\r\n    {\r\n        handle: convertToTemplate,\r\n        description: 'C++ Template',\r\n        extension: '.h',\r\n    },\r\n    {\r\n        handle: convertToCppIndirectAccess,\r\n        description: 'C++ Indirect',\r\n        extension: '.h',\r\n    },\r\n];\r\n\r\nexport default Converter;","import React from 'react';\r\n\r\n// antd\r\nimport { Modal, Form, Select } from 'antd';\r\n\r\nimport GroupSelect from './GroupSelect';\r\nimport Converter from './Converter';\r\nimport { splitKey } from './Utils';\r\n\r\nimport regDb from '../RegDb';\r\n\r\nexport default function Exporter(props) {\r\n    const {form, onFinish} = props;\r\n\r\n    const saveAs = (content, filename) => {\r\n\t    var dataStr = \"data:text/plain;charset=utf-8,\" + encodeURIComponent(content);\r\n\t    var downloadAnchorNode = document.createElement('a');\r\n\t    downloadAnchorNode.setAttribute(\"href\",     dataStr);\r\n\t\tdownloadAnchorNode.setAttribute(\"download\", filename);\r\n\t    document.body.appendChild(downloadAnchorNode); // required for firefox\r\n\t    downloadAnchorNode.click();\r\n\t\tdownloadAnchorNode.remove();\r\n\t}\r\n\r\n    const exportData = async ({source, format}) => {\r\n        let filename = splitKey(source)[1];\r\n\t\tif (filename === '/') {\r\n\t\t\tfilename = 'register';\r\n\t\t}\r\n\t\tif (filename.endsWith('/')) {\r\n\t\t\tfilename = filename.slice(0, -1);\r\n        }\r\n        filename += Converter[format].extension;\r\n\r\n        const data = await regDb.export(source);\r\n        saveAs(Converter[format].handle(data), filename)\r\n        onFinish();\r\n    }\r\n\r\n    const formProps = {\r\n\t\tlabelCol:   { span: 4  },\r\n\t\twrapperCol: { span: 20 },\r\n\t\tform, \r\n        initialValues: {\r\n            source: \"/\",\r\n            format: 0,\r\n        },\r\n        onFinish: exportData,\r\n    }\r\n    \r\n    return (\r\n        <Form {...formProps}>\r\n            <Form.Item \r\n                label=\"Source\"\r\n                name=\"source\"\r\n                validateFirst\r\n                rules={\r\n                    [{\r\n                        required: true,\r\n                        whitespace: true,\r\n                        message: \"required\"\r\n                    }, {\r\n                        pattern: /^\\/[/a-zA-Z0-9_ ]*$/,\r\n                        message: \"invalid\",\r\n                    }]\r\n                }\r\n            >\r\n                <GroupSelect/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Format\"\r\n                name=\"format\"\r\n                validateFirst\r\n                rules={\r\n                    [{\r\n                        type: \"number\",\r\n                        required: true,\r\n                        message: \"required\"\r\n                    }]\r\n                }\r\n            >\r\n                <Select>{\r\n                    Converter.map((v, i) => (\r\n                        <Select.Option key={i} value={i}>\r\n                            {v.description}\r\n                        </Select.Option>\r\n                    ))\r\n                }</Select>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport function ExporterModal(props) {\r\n    const {hide} = props;\r\n    const [form] = Form.useForm();\r\n\r\n    const modalProps = {\r\n        title: \"Export Data\",\r\n        width: 480,\r\n        visible: true,\r\n        maskClosable: false,\r\n        onOk: form.submit,\r\n        onCancel: hide,\r\n    };\r\n\r\n    return (\r\n        <Modal {...modalProps}>\r\n            <Exporter form={form} onFinish={hide}/>\r\n        </Modal>\r\n    );\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Tree, Input, Row, Col, Typography, Modal, message } from 'antd';\r\nimport { DownOutlined, EditOutlined, DeleteOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nimport { GroupEditorModal } from './GroupEditor';\r\nimport regDb from '../RegDb';\r\nimport './RegList.css';\r\n\r\nexport default function RegList(props) {\r\n    const [treeData, setTreeData] = useState([]);\r\n    const [savedKeys, setSavedKeys] = useState([]);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [expandedKeys, setExpandedKeys] = useState([]);\r\n    const [selectedKeys, setSelectedKeys] = useState([]);\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    const [modalCtrl, setModalCtrl] = useState({show: false, parent: null, data: null});\r\n\r\n    const handleClick = (key) => {\r\n        const toggle = (lst, e) => {\r\n            return lst.indexOf(e) !== -1 ? lst.filter(x=>x!==e) : [...lst, e];\r\n        }\r\n        if (key.endsWith(\"/\")) {\r\n            setExpandedKeys(keys => toggle(keys, key))\r\n        } else {\r\n            setSelectedKeys([key]);\r\n            props.onSelect(key);\r\n        }\r\n    }\r\n\r\n    const hierarchyToTreeData = (hierarchy, topKey) => hierarchy.map(node => {\r\n        const onEdit = node.name.endsWith(\"/\") ? async () => {\r\n            const data = await regDb.get(topKey + node.name);\r\n            setModalCtrl({\r\n                ...modalCtrl,\r\n                show: true,\r\n                data: data,\r\n            })\r\n        } : null;\r\n        return ({\r\n            key: topKey + node.name,\r\n            title: <TreeTitle name={node.name} parent={topKey} onEdit={onEdit} onClick={handleClick}/>,\r\n            children: hierarchyToTreeData(node.children, topKey + node.name),\r\n            isLeaf: !node.name.endsWith(\"/\"),\r\n        })\r\n    });\r\n\r\n    const fetchData = async () => {\r\n        const hierarchy = await regDb.getHierarchy();\r\n        const treeData = hierarchyToTreeData(hierarchy, \"/\");\r\n        setTreeData(treeData);\r\n    }\r\n\r\n    // N.B. if it matchs a group name, then none of the decendant of that group should be hidden.\r\n    const filterTreeData = (data, filter) => {\r\n        return data.reduce((acc, cur) => {\r\n            if (cur.key.endsWith(\"/\")) {\r\n                const props = filterTreeData(cur.children, filter);\r\n                if (props.treeData.length || filter.test(cur.key)) {\r\n                    acc.treeData.push({\r\n                        ...cur,\r\n                        children: props.treeData,\r\n                    });\r\n                    acc.expandedKeys = [...acc.expandedKeys, ...props.expandedKeys, cur.key];\r\n                }\r\n            } else {\r\n                if (filter.test(cur.key)) {\r\n                    acc.treeData.push(cur);\r\n                }\r\n            }\r\n            return acc;\r\n        }, {treeData: [], expandedKeys: []});\r\n    }\r\n\r\n    // `fetchData` on mount\r\n    useEffect(() => {fetchData()}, []);\r\n\r\n    // update `expandedKeys` on DB update\r\n    // `fetchData` on DB update\r\n    useEffect(() => {\r\n        const handleUpdate = ({oldData, newData}) => {\r\n            const oldKey = oldData.parent + oldData.name;\r\n            const newKey = newData.parent + newData.name;\r\n            if (oldKey !== newKey) {\r\n                setExpandedKeys(keys => keys.map(key => key.replace(oldKey, newKey)));\r\n            }\r\n        }\r\n        \r\n        const handleDelete = ({deletedKeys}) => {\r\n            setExpandedKeys(keys => keys.filter(key => !deletedKeys.includes(key)));\r\n        }\r\n        \r\n        regDb.subscribe(\r\n            handleUpdate, \"update\"\r\n        ).subscribe(\r\n            handleDelete, \"delete\"\r\n        ).subscribe(fetchData);\r\n\r\n        return () => {\r\n            regDb.unsubscribe(\r\n                handleUpdate, \"update\"\r\n            ).unsubscribe(\r\n                handleDelete, \"delete\"\r\n            ).unsubscribe(fetchData);\r\n        }\r\n    }, [])\r\n\r\n    // update `treeProps` whenever `treeData` or `searchValue` is changed\r\n    useEffect(() => {\r\n        if (searchValue === \"\") {\r\n            setFilteredData(treeData);\r\n        } else {\r\n            const re = new RegExp(searchValue, \"i\");\r\n            const result = filterTreeData(treeData, re);\r\n            setFilteredData(result.treeData);\r\n            setExpandedKeys(result.expandedKeys);\r\n        }\r\n    }, [treeData, searchValue]);\r\n\r\n    const onSearchChange = (e) => {\r\n        const value = e.target.value;\r\n        if (searchValue === \"\") { // preserve `expandedKeys`\r\n            setSavedKeys(expandedKeys);\r\n        } else if (value === \"\") { // restore `expandedKeys`\r\n            setExpandedKeys(savedKeys);\r\n        }\r\n        setSearchValue(value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"reg-list\">\r\n                <Input.Search placeholder=\"Regex\" onChange={onSearchChange} /> \r\n                <div className=\"tree-container\">\r\n                    <Tree \r\n                        blockNode\r\n                        switcherIcon={<DownOutlined/>}\r\n                        onExpand={setExpandedKeys}\r\n                        treeData={filteredData}\r\n                        expandedKeys={expandedKeys}\r\n                        selectedKeys={selectedKeys}\r\n                    />\r\n                </div>\r\n            </div>\r\n            \r\n            {modalCtrl.show && <GroupEditorModal\r\n                parent={modalCtrl.parent}\r\n                grp={modalCtrl.data}\r\n                title=\"Edit Group\"\r\n                hide={()=>setModalCtrl({...modalCtrl, show: false})}\r\n            />}\r\n        </>\r\n    );\r\n}\r\n\r\nfunction TreeTitle(props) {\r\n    const {name, parent, onEdit, onClick} = props;\r\n    const title = name.endsWith(\"/\") ? name.slice(0, -1) : name;\r\n\r\n    const handleDelete = (e) => {\r\n        e.stopPropagation();\r\n        const key = parent + name;\r\n        const modalContent = \r\n            <p>\r\n                This will delete entry <Typography.Text code>{key}</Typography.Text>\r\n                {key.endsWith(\"/\") && \" and everything underneath it\"}.\r\n                There is no way back.\r\n            </p>;\r\n        \r\n        const modal = Modal.confirm({\r\n            title: \"Are you sure?\",\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: modalContent,\r\n            async onOk() {\r\n                modal.update({\r\n                    okButtonProps: {loading: true},\r\n                });\r\n                try {\r\n                    await regDb.delete(key);\r\n                    message.success(\r\n                        <span><Typography.Text code>{key}</Typography.Text> Deleted</span>\r\n                    );\r\n                }\r\n                catch (e) {\r\n                    message.error(`${e.name}: ${e.message}`);\r\n                }\r\n            },\r\n        })\r\n    }\r\n\r\n    const editBtn = onEdit ? (\r\n        <EditOutlined\r\n            className=\"act-edit\"\r\n            onClick={onEdit}\r\n        />\r\n    ) : null;\r\n\r\n    const deleteBtn = \r\n        <DeleteOutlined\r\n            className=\"act-delete\"\r\n            onClick={handleDelete}\r\n        />;\r\n    \r\n    return (\r\n        <Row className=\"tree-title\" >\r\n            <Col flex=\"auto\" onClick={()=>onClick(parent+name)}> {title} </Col>\r\n            <Col> {editBtn} {deleteBtn} </Col>\r\n        </Row>\r\n    )\r\n}","import React, { useState } from 'react';\r\n\r\nimport { Steps, Radio, Row, Col, Button, message, Spin, Alert, Form, Input } from 'antd';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\n\r\nimport regDb from '../RegDb';\r\n\r\nimport './DataPicker.css'\r\n\r\nconst { Step } = Steps;\r\n\r\n//------------------------------------------------------------\r\n\r\nfunction DataPicker(props) {\r\n\tconst [current,     setCurrent]   = useState(0);\r\n\tconst [source,      setSource]    = useState(\"fresh\");\r\n\tconst [json,        setJson]      = useState(null);\r\n\tconst [isCommiting, setCommiting] = useState(false);\r\n\r\n\tconst [form] = Form.useForm();\r\n\r\n\tconst handleImport = () => {\r\n\t\tsetCommiting(true);\r\n\t\t\r\n\t\tregDb.import(json).then(() => {\r\n\t\t\tsetCurrent(2);\r\n\t\t\tsetCommiting(false);\r\n\t\t}).catch(() => {\r\n\t\t\tmessage.error(\"Failed to import this JSON file\");\r\n\t\t\tsetCommiting(false);\r\n\t\t});\r\n\t}\r\n\r\n\tconst handleFresh = () => {\r\n\t\tsetCommiting(true);\r\n\t\tform.validateFields().then(value => {\r\n\t\t\tregDb.reset().then(() => {\r\n\t\t\t\tregDb.add({\r\n\t\t\t\t\tparent: \"/\",\r\n\t\t\t\t\tname: value.name + \"/\",\r\n\t\t\t\t\toffset: value.offset,\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}).then(() => {\r\n\t\t\tsetCurrent(2);\r\n\t\t\tsetCommiting(false);\r\n\t\t}).catch(() => {\r\n\t\t\tsetCommiting(false);\r\n\t\t})\r\n\t}\r\n\r\n\tconst getContent = () => {\r\n\t\tswitch (current) {\r\n\t\tcase 0:\r\n\t\t\treturn <SourceSelect setSource={setSource} value={source}/>;\r\n\t\tcase 1:\r\n\t\t\tif (source === \"import\") {\r\n\t\t\t\treturn <JsonReader setJson={setJson}/>;\r\n\t\t\t} else if (source === \"fresh\") {\r\n\t\t\t\treturn <GroupAdder form={form}/>;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\tcase 2:\r\n\t\t\treturn (\r\n\t\t\t\t<div style={{textAlign: \"center\", width: \"100%\"}}>\r\n\t\t\t\t\t<h3>Great, you are ready to go!</h3>\r\n\t\t\t\t\t<Button type=\"primary\" onClick={props.onFinish}>Proceed</Button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\tdefault:\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tconst getPrevBtn = () => {\r\n\t\treturn current === 1 ? <Button onClick={()=>setCurrent(0)}>Back</Button> : null;\r\n\t}\r\n\r\n\tconst getNextBtn = () => {\r\n\t\tswitch (current) {\r\n\t\tcase 0:\r\n\t\t\treturn <Button onClick={()=>setCurrent(1)}>Next</Button>;\r\n\t\t\r\n\t\tcase 1:\r\n\t\t\tif (source === \"import\") {\r\n\t\t\t\treturn <Button onClick={handleImport} loading={isCommiting} disabled={!json}>Next</Button>;\r\n\t\t\t} else if (source === \"fresh\") {\r\n\t\t\t\treturn <Button onClick={handleFresh} loading={isCommiting}>Next</Button>\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\r\n\t\tdefault:\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tconst getSourceDescription = () => {\r\n\t\tif (current === 0) {\r\n\t\t\treturn \"Provide data\";\r\n\t\t} else {\r\n\t\t\tif (source === \"fresh\") {\r\n\t\t\t\treturn \"Create a group\";\r\n\t\t\t} else if (source === \"import\") {\r\n\t\t\t\treturn \"Import from JSON\";\r\n\t\t\t} else {\r\n\t\t\t\treturn \"Provide data\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst steps = [{\r\n\t\ttitle: \"Source\",\r\n\t\tdescription: \"Choose data source\"\r\n\t}, {\r\n\t\ttitle: \"Data\",\r\n\t\tdescription: getSourceDescription()\r\n\t}, {\r\n\t\ttitle: \"Done\",\r\n\t\tdescription: \"All set\"\r\n\t}]\r\n\r\n\treturn (\r\n\t\t<div className=\"data-source-container\">\r\n\t\t\t<div className=\"data-source\">\r\n\t\t\t\t<Row >\r\n\t\t\t\t\t<Steps current={current}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsteps.map(el => (\r\n\t\t\t\t\t\t\t\t<Step {...el} key={el.title}></Step>\r\n\t\t\t\t\t\t\t))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Steps>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row style={{padding: \"24px 0\"}}>\r\n\t\t\t\t\t{getContent()}\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row justify=\"space-between\">\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t{getPrevBtn()}\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t{getNextBtn()}\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction SourceSelect(props) {\r\n\tconst radioStyle = {\r\n\t\tdisplay: 'block',\r\n\t\theight: '30px',\r\n\t\tlineHeight: '30px',\r\n\t};\r\n\tconst onChange = (e) => {\r\n\t\tprops.setSource(e.target.value);\r\n\t};\r\n\treturn (\r\n\t\t<Form>\r\n\t\t\t<p>\r\n\t\t\t\tAll the data will be stored in your browser's &nbsp;\r\n\t\t\t\t<a \r\n\t\t\t\t\thref=\"https://developers.google.com/web/ilt/pwa/working-with-indexeddb\" \r\n\t\t\t\t\ttarget=\"_blank\" \r\n\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t>\r\n\t\t\t\t\tIndexedDB\r\n\t\t\t\t</a>. \r\n\t\t\t\tIt appears that your database is empty. Please choose a way to create one.\r\n\t\t\t</p>\r\n\t\t\t<Radio.Group onChange={onChange} value={props.value} style={{paddingLeft: \"16px\"}}>\r\n\t\t\t\t<Radio style={radioStyle} value=\"fresh\">\r\n\t\t\t\t\tStart fresh by hand \r\n\t\t\t\t</Radio>\r\n\t\t\t\t<Radio style={radioStyle} value=\"import\">\r\n\t\t\t\t\tImport from JSON file\r\n\t\t\t\t</Radio>\r\n\t\t\t</Radio.Group>\r\n\t\t</Form>\r\n\t)\r\n}\r\n\r\nfunction JsonReader(props) {\r\n\tconst [isLoading, setLoading] = useState(false);\r\n\tconst [filename, setFilename] = useState(null);\r\n\t\r\n\t// dragEnter / dragLeave triggers on child elementes as well...\r\n\tconst [dragCounter, setDragCounter] = useState(0);\r\n\t\r\n\tconst readData = (file) => {\r\n\t\tconst reader = new FileReader();\r\n\t\treader.onload = () => {\r\n\t\t\tprops.setJson(reader.result)\r\n\t\t\tsetFilename(file.name)\r\n\t\t\tsetLoading(false);\r\n\t\t};\r\n\t\tsetLoading(true);\r\n\t\treader.readAsText(file);\r\n\t};\r\n\t\r\n\tconst handleUpload = (e) => {\r\n\t\treadData(e.target.files[0]);\r\n\t\te.target.value = null; // so can load same file after unload\r\n\t};\r\n\t\r\n\tconst handleDrop = (e) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t\tconst data = e.dataTransfer;\r\n\t\tif (data.files.length) {\r\n\t\t\treadData(data.files[0]);\r\n\t\t}\r\n\t};\r\n\t\r\n\tconst handleDragOver = (e) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t};\r\n\t\r\n\tconst handleDragEnter = (e) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t\tsetDragCounter(dragCounter + 1)\r\n\t};\r\n\t\r\n\tconst handleDragLeave = (e) => {\r\n\t\te.preventDefault();\r\n\t\te.stopPropagation();\r\n\t\tsetDragCounter(dragCounter - 1);\r\n\t};\r\n\t\r\n\tconst handleUnload = () => {\r\n\t\tprops.setJson(null)\r\n\t\tsetFilename(null)\r\n\t}\r\n\t\r\n\tconst fileList = filename ? (\r\n\t\t<Alert\r\n\t\t\tmessage={filename}\r\n\t\t\tclosable\r\n\t\t\tonClose={handleUnload}\r\n\t\t\tstyle={{marginTop: \"16px\"}}\r\n\t\t/>\r\n\t) : null;\r\n\r\n\tconst dragOverStyle = dragCounter ? {border: \"1px dashed #40a9ff\"} : null;\r\n\t\r\n\treturn (\r\n\t\t<div className=\"data-picker-container\" >\r\n\t\t\t<label \r\n\t\t\t\tclassName=\"data-picker\"\r\n\t\t\t\tstyle={dragOverStyle}\r\n\t\t\t\tonDrop={handleDrop} \r\n\t\t\t\tonDragOver={handleDragOver}\r\n\t\t\t\tonDragEnter={handleDragEnter}\r\n\t\t\t\tonDragLeave={handleDragLeave}\r\n\t\t\t>\r\n\t\t\t\t<input type=\"file\" accept=\"application/json\" onChange={handleUpload}/>\r\n\t\t\t\t<Spin spinning={isLoading}>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<span className=\"data-picker-icon\"><InboxOutlined /></span>\r\n\t\t\t\t\t\t<p>Click or drag JSON file to this area to upload</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Spin>\r\n\t\t\t</label>\r\n\t\t\t{ fileList }\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nfunction GroupAdder(props) {\r\n\tconst layout = {\r\n\t\tlabelCol: {\r\n\t\t  span: 5,\r\n\t\t},\r\n\t\twrapperCol: {\r\n\t\t  span: 19,\r\n\t\t},\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<Form\r\n\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t{...layout} \r\n\t\t\tform={props.form}\r\n\t\t>\r\n\t\t\t<p>Please create a group to host all your data. You can edit or add more groups later.</p>\r\n\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"Name\"\r\n\t\t\t\tname=\"name\"\r\n\t\t\t\trules={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\tmessage: \"required\"\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\tpattern: /^[a-zA-Z][a-zA-Z0-9_ ]*$/,\r\n\t\t\t\t\t\tmessage: \"invalid\",\r\n\t\t\t\t\t}\r\n\t\t\t\t]}\r\n\t\t\t>\r\n\t\t\t\t<Input />\r\n\t\t\t</Form.Item>\r\n\t\t\t<Form.Item\r\n\t\t\t\tlabel=\"Base Address\"\r\n\t\t\t\tname=\"offset\"\r\n\t\t\t\trules={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\twhitespace: true,\r\n\t\t\t\t\t\tmessage: \"required\",\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\tpattern: /^[0-9a-f]+$/i,\r\n\t\t\t\t\t\tmessage: \"not a hex number\",\r\n\t\t\t\t\t}\r\n\t\t\t\t]}\r\n\t\t\t>\r\n\t\t\t\t<Input addonBefore=\"0x\"/>\r\n\t\t\t</Form.Item>\r\n\t\t</Form>\r\n\t)\r\n}\r\n\r\nexport default DataPicker;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport RegView from './components/RegisterViewer';\r\nimport { GroupEditorModal } from './components/GroupEditor';\r\nimport { RegEditorModal } from './components/RegEditor';\r\nimport { ExporterModal } from './components/Exporter';\r\n\r\nimport { Layout, Row, Col, Button, Skeleton, message, Typography, Empty } from 'antd';\r\nimport { FolderAddOutlined, FileAddOutlined, ExportOutlined, ImportOutlined } from '@ant-design/icons';\r\n\r\nimport RegList from './components/RegList';\r\nimport DataPicker from './components/DataPicker';\r\n\r\nimport regDb, { KeyExistError } from './RegDb';\r\n\r\nimport './App.css'\r\n\r\nconst {Header, Sider, Content } = Layout;\r\n\r\n//------------------------------------------------------------\r\n\r\nexport default function App() {\r\n\tconst [stage, setStage] = useState(\"init\");\r\n\r\n\tuseEffect(() => {\r\n\t\tregDb.count().then(n => setStage(n > 0 ? \"loaded\" : \"create\"));\r\n\t}, []);\r\n\t\r\n\tswitch (stage) {\r\n\tcase \"init\":\r\n\t\treturn <Skeleton active/>;\r\n\r\n\tcase \"loaded\":\r\n\t\treturn <Main />;\r\n\t\r\n\tcase \"create\":\r\n\t\treturn <DataPicker onFinish={()=>setStage(\"loaded\")} />;\r\n\t\r\n\tdefault:\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nfunction Main() {\r\n\tconst [activePath, setActivePath] = useState();\r\n\tconst [showRegModel, setShowRegModel] = useState(false);\r\n\tconst [showGrpModel, setShowGrpModel] = useState(false);\r\n\tconst [showExpModel, setShowExpModel] = useState(false);\r\n\tconst [content, setContent] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleUpdate = ({oldData, newData}) => {\r\n            const oldKey = oldData.parent + oldData.name;\r\n            const newKey = newData.parent + newData.name;\r\n\t\t\tsetActivePath(path => path && path.replace(oldKey, newKey));\r\n\t\t}\r\n\t\tregDb.subscribe(handleUpdate, \"update\");\r\n\t\treturn () => regDb.unsubscribe(handleUpdate, \"update\");\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!activePath) {\r\n\t\t\tsetContent(<Empty description=\"Please select one entry from the left panel\"/>);\r\n\t\t} else if (!activePath.endsWith(\"/\")) {\r\n\t\t\tsetContent(<RegView path={activePath}/>)\r\n\t\t}\r\n\t}, [activePath]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleDelete = ({deletedKeys}) => {\r\n\t\t\tif (deletedKeys.includes(activePath)) {\r\n\t\t\t\tsetActivePath();\r\n\t\t\t}\r\n\t\t}\r\n\t\tregDb.subscribe(handleDelete, \"delete\");\r\n\t\treturn () => regDb.unsubscribe(handleDelete, \"delete\");\r\n\t}, [activePath])\r\n\r\n\tconst siderWidth = 320; // px\r\n\tconst parent = (() => {\r\n\t\tif (!activePath) return \"/\";\r\n\t\treturn activePath.split(\"/\").slice(0, -1).join('/') + \"/\";\r\n\t})();\r\n\r\n\tconst handleImport = (e) => {\r\n\t\tconst reader = new FileReader();\r\n\t\treader.onload = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tawait regDb.import(reader.result);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tif (e instanceof KeyExistError) {\r\n\t\t\t\t\tmessage.error(<span>Entry with key <Typography.Text code>{e.message}</Typography.Text> is already exist</span>)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmessage.error(`${e.name}: ${e.message}`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treader.readAsText(e.target.files[0]);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Layout>\r\n\t\t\t<Header style={{position: \"fixed\", zIndex: 1, width: \"100%\"}}>\r\n\t\t\t\t<Row type=\"flex\" justify=\"space-between\">\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<div style={{color: \"white\", fontSize: \"1.5rem\"}}>RegView</div>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<Button.Group>\r\n\t\t\t\t\t\t\t<Button ghost type=\"primary\" icon={<FolderAddOutlined />} onClick={()=>setShowGrpModel(true)}>New Group</Button>\r\n\t\t\t\t\t\t\t<Button ghost type=\"primary\" icon={<FileAddOutlined />} onClick={()=>setShowRegModel(true)}>New Register</Button>\r\n\t\t\t\t\t\t\t<Button ghost type=\"primary\" icon={<ExportOutlined />} onClick={()=>setShowExpModel(true)}>Export</Button>\r\n\t\t\t\t\t\t\t<label className=\"ant-btn ant-btn-primary ant-btn-background-ghost\" >\r\n\t\t\t\t\t\t\t\t<ImportOutlined />\r\n\t\t\t\t\t\t\t\t<span style={{marginLeft: 8}}>Import</span>\r\n\t\t\t\t\t\t\t\t<input style={{display: \"none\"}} type=\"file\" accept=\"application/json\" onChange={handleImport}/>\r\n\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t</Button.Group>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Header>\r\n\t\t\t<Layout style={{marginTop: 64}}>\r\n\t\t\t\t<Sider \r\n\t\t\t\t\twidth={siderWidth} theme=\"light\"\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\toverflow: 'auto',\r\n\t\t\t\t\t\theight: 'calc(100vh - 64px)',\r\n\t\t\t\t\t\tposition: 'fixed',\r\n\t\t\t\t\t\tleft: 0,\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<RegList onSelect={setActivePath}/>\r\n\t\t\t\t</Sider>\r\n\t\t\t\t<Layout style={{ \r\n\t\t\t\t\tmarginLeft: siderWidth,\r\n\t\t\t\t\tbackground: '#fff',\r\n\t\t\t\t\tpadding: \"16px 24px\",\r\n\t\t\t\t}}>\r\n\t\t\t\t\t<Content>\r\n\t\t\t\t\t\t{content}\r\n\t\t\t\t\t</Content>\r\n\t\t\t\t</Layout>\r\n\t\t\t</Layout>\r\n\t\t\t{showRegModel && <RegEditorModal\r\n\t\t\t\tparent={parent}\r\n\t\t\t\tactivePath={activePath}\r\n\t\t\t\ttitle=\"Create New Register\"\r\n\t\t\t\thide={()=>setShowRegModel(false)}\r\n\t\t\t/>}\r\n\t\t\t{showGrpModel && <GroupEditorModal\r\n\t\t\t\tparent={parent}\r\n\t\t\t\ttitle=\"Create New Group\"\r\n\t\t\t\thide={()=>setShowGrpModel(false)}\r\n\t\t\t/>}\r\n\t\t\t{showExpModel && <ExporterModal\r\n\t\t\t\thide={()=>setShowExpModel(false)}\r\n\t\t\t/>}\r\n\t\t</Layout>\r\n\t);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport './index.css';\n\n// React Entry\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}